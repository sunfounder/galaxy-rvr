.. note::

    ¬°Hola! ¬°Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete m√°s en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros apasionados.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones festivas.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy!


Lecci√≥n 12: Conduciendo el Rover con la App
===============================================

En nuestra √∫ltima aventura, dominamos el uso del SunFounder Controller para explorar el mundo a trav√©s de los "ojos" del rover y ajustar su vista controlando el mecanismo de inclinaci√≥n. ¬°Era como darle a nuestro rover marciano el sentido de la vista!

Ahora, imagina que tambi√©n puedes dirigir a este explorador marciano, gui√°ndolo por el camino que desees. En esta lecci√≥n, ¬°eso es exactamente lo que haremos! Llevaremos nuestra comprensi√≥n del SunFounder Controller al siguiente nivel y aprenderemos a maniobrar nuestro rover, d√°ndonos la emocionante experiencia de ser un conductor de rover marciano.

Con nuestro curso STEAM lleno de vida, los ni√±os no solo aprender√°n, sino que vivir√°n la emoci√≥n y el asombro de la exploraci√≥n espacial. ¬°Abr√≥chate el cintur√≥n y prep√°rate para un emocionante viaje!

.. raw:: html

    <video width="600" loop autoplay muted>
        <source src="_static/video/camera_app.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Objetivos de aprendizaje
--------------------------

* Profundizar en el conocimiento del SunFounder Controller.
* Aprender a conducir el rover marciano usando la aplicaci√≥n m√≥vil.


Materiales necesarios
-------------------------

* Modelo del rover marciano (equipado con todos los componentes, excepto el panel solar y la placa inferior)
* Arduino IDE
* Computadora
* Tableta o smartphone con la aplicaci√≥n SunFounder Controller instalada

Pasos del curso
--------------------

**Paso 1: Sum√©rgete en el SunFounder Controller**

En nuestra lecci√≥n anterior, probamos por primera vez el SunFounder Controller, sus operaciones b√°sicas y usos. Pero seguramente te quedaste con algunas preguntas, ¬øverdad? Es hora de saciar esa curiosidad y profundizar en este asombroso dispositivo.

Al crear un nuevo controlador, te encontrar√°s con una pantalla que al principio puede parecer un enigma.

.. image:: img/app/app_blank.png

Ver√°s una variedad de formas: rect√°ngulos largos, rect√°ngulos cortos y cuadrados grandes, cada uno con identificadores √∫nicos que van de la A a la Q.

¬øAlguna vez te has preguntado por qu√© hay tanta diversidad? ¬øQu√© significan los identificadores de la A a la Q?

¬°Vamos a descubrirlo!

* **Descifrando las formas**

    Por ejemplo, toca en un √°rea rectangular larga. Como abrir un cofre del tesoro, revelar√°s varios widgets. ¬øRecuerdas el **Slider** de nuestra clase anterior? Al deslizarlo hacia la izquierda o derecha control√°bamos la inclinaci√≥n de la c√°mara del rover. Tambi√©n est√° el **Gauge**, que puede ser el veloc√≠metro personal de tu rover, ¬°y muchos otros widgets m√°s!

    .. image:: img/app/app_long.png

    Si tocas el rect√°ngulo corto, se revelar√° un conjunto diferente de widgets. El widget **Bot√≥n**, como un interruptor binario, emite comandos √∫nicos, mientras que el widget **Micr√≥fono** puede escuchar tus comandos de voz para controlar el rover, entre otros widgets.

    .. image:: img/app/app_short.png

    ¬øY qu√© pasa con el bloque cuadrado? Alberga el widget **Joystick**, el widget D-pad y el widget Throttle. ¬°Y s√≠, hay m√°s!

    .. image:: img/app/app_square.png

    Por ahora, no te preocupes por la funci√≥n o el uso de cada widget. Familiar√≠zate con los widgets que alberga cada forma.

* **Aprovechando los widgets**

    A trav√©s del contenido anterior, sabemos que hay muchos widgets diferentes. Entonces, ¬øpara qu√© pueden ser utilizados?

    Clasificamos estos widgets en dos tipos: widgets de control y widgets de visualizaci√≥n.

    * Los **widgets de control** te permiten manipular la aplicaci√≥n, y luego el rover recibe estos comandos de control y realiza las acciones correspondientes.
    * Los **widgets de visualizaci√≥n** te permiten mostrar algunos valores en la aplicaci√≥n, como valores de sensores, etc.

    Para una descripci√≥n detallada de estos widgets, consulta: |link_widgets_list|.

    Adem√°s, para las funciones, par√°metros, etc. relacionados con estos widgets, consulta: |link_ai_camera_library_api|.

* **El papel de los identificadores**

    Cada forma tiene un identificador en la esquina inferior derecha. ¬øPor qu√©? Vamos a entenderlo con un ejemplo.

    En nuestra √∫ltima clase, a√±adimos un widget **Slider** en la regi√≥n **D**. El c√≥digo para obtener su valor era algo as√≠:

        .. code-block:: arduino

            int16_t sliderD = aiCam.getSlider(REGION_D);
        
    ¬øY si a√±adimos un widget **Slider** en la regi√≥n **B**? ¬øC√≥mo cambiar√≠a el c√≥digo? Tan simple como reemplazar ``REGION_D`` con ``REGION_B``.

        .. code-block:: arduino

            int16_t sliderD = aiCam.getSlider(REGION_B);

    ¬øF√°cil, verdad? Estos identificadores ayudan a distinguir qu√© widget has a√±adido en qu√© √°rea.


.. note::
    * Instrucciones detalladas sobre c√≥mo crear y a√±adir widgets, conectar y operar el SunFounder Controller est√°n disponibles en el ``Paso 3`` de la ``Lecci√≥n 11``.
    * Para operaciones m√°s avanzadas, visita |link_sc_page|.

**Paso 2: Controla el Rover Marciano con Doble Acelerador**

Ahora que hemos profundizado en los widgets del SunFounder Controller, llevemos nuestro juego al siguiente nivel incorporando dos widgets de **Throttle** para comandar el movimiento del Rover Marciano.

#. Coloca un widget **Throttle** en las regiones **K** y **Q**. Necesitar√°s pulsar el bot√≥n |app_edit| en la parte superior derecha para cambiar al modo de edici√≥n, y una vez que hayas terminado de configurar todo, haz clic en |app_save| para guardar tus cambios.

    .. image:: img/app/app_throttle.png

#. Como planeamos utilizar dos widgets de **Throttle** para gobernar la movilidad del rover, ajustemos la funci√≥n que dicta los movimientos del rover en consecuencia:

    .. code-block:: arduino

        // Funci√≥n para configurar la potencia de los motores
        void carSetMotors(int8_t power_L, int8_t power_R) {
            // Configurar potencia para el motor izquierdo
            if (power_L >= 0) {
                SoftPWMSet(in1, map(power_L, 0, 100, 0, 255));
                SoftPWMSet(in2, 0);
            } else {
                SoftPWMSet(in1, 0);
                SoftPWMSet(in2, map(power_L, 0, -100, 0, 255));
            }

            // Configurar potencia para el motor derecho
            if (power_R >= 0) {
                SoftPWMSet(in3, 0);
                SoftPWMSet(in4, map(power_R, 0, 100, 0, 255));
            } else {
                SoftPWMSet(in3, map(power_R, 0, -100, 0, 255));
                SoftPWMSet(in4, 0);
            }
        }

    La funci√≥n ``carSetMotors()`` acepta dos argumentos, ``power_L`` y ``power_R``, que son probablemente los ajustes de potencia para los motores izquierdo y derecho, respectivamente. Los valores de estos argumentos var√≠an entre -100 y 100, donde los valores negativos indican movimiento hacia atr√°s, 0 indica detenerse y los valores positivos indican avance.

    * Configurar potencia para el motor izquierdo:

        * Si ``power_L`` es mayor o igual a 0, el motor izquierdo avanza.

        * ``SoftPWMSet(in1, map(power_L, 0, 100, 0, 255))`` usa la funci√≥n ``map`` de Arduino para mapear el rango de entrada (0 a 100) al rango de salida (0 a 255), ya que los valores de PWM en Arduino est√°n entre 0 (0% de ciclo de trabajo) y 255 (100% de ciclo de trabajo). Este valor mapeado se pasa a la funci√≥n ``SoftPWMSet`` junto con ``in1``.

        * Si ``power_L`` es menor que 0, el motor izquierdo retrocede y el rango de entrada de la funci√≥n ``map`` cambia de 0 a -100.

    * Configurar potencia para el motor derecho:

        * Esto sigue la misma l√≥gica que configurar la potencia para el motor izquierdo, pero usando ``in3`` e ``in4``, y los valores de entrada son ``power_R`` en lugar de ``power_L``.

    En general, esta funci√≥n toma dos valores de potencia de los motores, los convierte en los valores PWM apropiados y ajusta los valores PWM en los pines correctos para lograr el movimiento deseado.

#. Dentro de la funci√≥n ``onReceive()``, recupera los valores de los dos widgets de **Throttle** y √∫salos como la potencia para los motores izquierdo y derecho del Rover Marciano.

    .. code-block:: arduino
        :emphasize-lines: 9,10,13

        void onReceive() {
            // Obtener el valor del control deslizante en la regi√≥n D
            int16_t sliderD = aiCam.getSlider(REGION_D);

            // Mover el servo al √°ngulo indicado por el control deslizante
            myServo.write(int(sliderD));

            // Obtener los valores del acelerador para la izquierda y la derecha
            int throttle_L = aiCam.getThrottle(REGION_K);
            int throttle_R = aiCam.getThrottle(REGION_Q);

            // Configurar la potencia para los motores
            carSetMotors(throttle_L, throttle_R);
        }

Aqu√≠ tienes el c√≥digo completo:

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/c70d2598-a1f9-465a-83bb-4ebd38eb74fa/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Cada vez que vuelvas a ejecutar el c√≥digo, necesitar√°s repetir los siguientes cuatro pasos:

* Antes de subir el c√≥digo, aseg√∫rate de que el interruptor est√© deslizado hacia la derecha.

    .. image:: img/camera_upload.png

* Una vez que el c√≥digo se haya subido correctamente, desliza el interruptor hacia la izquierda para iniciar la ESP32 CAM.
* Con√©ctate a la red ``GalaxyRVR``.
* Con√©ctate y ejecuta el controlador.

Ahora, con un simple deslizamiento del pulgar en tus widgets ``Throttle``, ver√°s el Rover Marciano en acci√≥n, avanzando y girando con renovado entusiasmo. ¬°Que comience la exploraci√≥n!

**Paso 3: Visualizaci√≥n de lecturas de sensores**

En nuestro viaje con el SunFounder Controller, hemos interactuado activamente con nuestro Rover Marciano a trav√©s de widgets de control, incluidos controles deslizantes para ajustar la inclinaci√≥n y aceleradores para dictar el movimiento del rover. Pero, ¬øqu√© tal si aprovechamos el poder de los widgets de visualizaci√≥n para pintar un cuadro claro de los alrededores de nuestro rover?

Veamos c√≥mo podemos hacer esto visualizando los valores de los m√≥dulos de evitaci√≥n de infrarrojos (IR) izquierdo y derecho, as√≠ como la distancia captada por el m√≥dulo ultras√≥nico. Estos datos en tiempo real nos brindar√°n una imagen clara del entorno operativo del rover.

As√≠ es como podemos lograrlo:

#. Comienza a√±adiendo tres widgets de N√∫mero a tu SunFounder Controller. No olvides que puedes personalizar sus nombres y unidades usando el bot√≥n de configuraci√≥n.

    .. image:: img/app/app_show.png

#. A continuaci√≥n, profundicemos en el c√≥digo. Comienza trayendo fragmentos de c√≥digo de los m√≥dulos de evitaci√≥n IR y el m√≥dulo ultras√≥nico de nuestras lecciones anteriores.

    .. code-block:: arduino

        ...
        // Definir el pin para el m√≥dulo ultras√≥nico
        #define ULTRASONIC_PIN 10

        // Definir los pines para los m√≥dulos IR
        #define IR_RIGHT 7
        #define IR_LEFT 8

        void setup() {
            ...

            // Configurar los pines del m√≥dulo IR como entradas
            pinMode(IR_RIGHT, INPUT);
            pinMode(IR_LEFT, INPUT);
        }


        float readSensorData() {
            // Se requiere un retraso de 4 ms, de lo contrario la lectura puede ser 0
            delay(4);

            //Configurar en OUTPUT para enviar la se√±al
            pinMode(ULTRASONIC_PIN, OUTPUT);

            ...
        }


#. En la funci√≥n ``onReceive()``, extrae los valores de los m√≥dulos de evitaci√≥n y del sensor ultras√≥nico. Luego, actualiza estos valores en el diccionario ``sendDoc[]``. Las claves ``N``, ``P`` y ``O`` corresponden a los c√≥digos de las regiones de los tres widgets de N√∫mero que has a√±adido.

    .. code-block:: arduino

        // Funci√≥n que se ejecuta al recibir datos del Controller
        void onReceive() {

            ...

            // Leer valores de los sensores IR
            int leftValue = digitalRead(IR_LEFT);
            int rightValue = digitalRead(IR_RIGHT);
            aiCam.sendDoc["N"] = leftValue;
            aiCam.sendDoc["P"] = rightValue;
            
            // ultras√≥nico
            float distance = readSensorData();
            aiCam.sendDoc["O"] = distance;
        }

Aqu√≠ tienes el c√≥digo completo:

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/6c867007-a0e8-4f85-980d-ec1cd1a70969/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Una vez que el c√≥digo se haya subido correctamente, pon en marcha tu SunFounder Controller. Ser√°s recibido con los valores en tiempo real de los m√≥dulos de evitaci√≥n y la distancia detectada por el sensor ultras√≥nico, lo que te proporcionar√° una visi√≥n clara del entorno inmediato del rover.

.. image:: img/app/app_show_ir_ultrasonic.png

Con este paso completado, has navegado con √©xito por el mundo de los widgets de visualizaci√≥n. Si√©ntete libre de experimentar con diferentes widgets para mostrar la informaci√≥n que te parezca m√°s interesante. ¬°Feliz exploraci√≥n!

**Paso 4: Reflexi√≥n y Conclusi√≥n**

En esta lecci√≥n, hemos profundizado en el conocimiento del SunFounder Controller, comprendiendo c√≥mo podemos utilizar sus widgets para no solo dirigir nuestro Rover Marciano, sino tambi√©n monitorear sus datos ambientales en tiempo real.

Ahora, te planteamos un desaf√≠o:

¬øQu√© tal si a√±ades algunos widgets de Interruptor a tu SunFounder Controller? Con estos interruptores activados, el Rover Marciano podr√≠a cambiar entre los modos de evitaci√≥n y seguimiento. O, ¬øpor qu√© no usar los interruptores para controlar la tira de luces, encendi√©ndola o apag√°ndola, o incluso cambiando su color?

¬øTe sientes con confianza para aceptar este reto?

¬°Estamos ansiosos por verte superar este desaf√≠o!
