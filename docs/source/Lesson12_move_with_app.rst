.. note::

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 ! Plongez au c≈ìur de l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 aux c√¥t√©s d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Soutien d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez astuces et tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et d√©couvrez des aper√ßus in√©dits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derni√®res nouveaut√©s.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Le√ßon 12 : Piloter le Rover avec l'Application
===================================================

Lors de notre derni√®re aventure, nous avons ma√Ætris√© l'utilisation du SunFounder Controller pour non seulement explorer le monde √† travers les yeux du rover, mais aussi ajuster son regard en contr√¥lant le m√©canisme d'inclinaison. C'√©tait comme donner une vision √† notre rover martien !

Maintenant, imaginez si vous pouviez √©galement diriger cet explorateur martien, contr√¥ler son chemin √† votre guise. Dans cette le√ßon, c'est exactement ce que nous allons faire ! Nous allons approfondir notre compr√©hension du SunFounder Controller et apprendre √† man≈ìuvrer notre rover, pour vivre l'exaltante exp√©rience d'√™tre un conducteur de rover martien !

Avec notre cours STEAM vif et interactif, les enfants n'apprendront pas seulement, ils vivront l'excitation et l'√©merveillement de l'exploration spatiale ! Attachez votre ceinture et pr√©parez-vous pour un voyage palpitant !

.. raw:: html

    <video width="600" loop autoplay muted>
        <source src="_static/video/camera_app.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Objectifs d'apprentissage
-----------------------------

* Approfondir la compr√©hension du SunFounder Controller.
* Apprendre √† piloter le rover martien avec l'application mobile.


Mat√©riel n√©cessaire
---------------------

* Mod√®le de Rover martien (√©quip√© de tous les composants, sauf le panneau solaire et la plaque inf√©rieure)
* Arduino IDE
* Ordinateur
* Tablette ou smartphone avec l'application SunFounder Controller install√©e

√âtapes du cours
------------------

**√âtape 1 : Explorer en profondeur le SunFounder Controller**

Dans notre le√ßon pr√©c√©dente, nous avons eu un premier aper√ßu des op√©rations de base et des usages du SunFounder Controller. Mais il reste s√ªrement des questions en suspens, n'est-ce pas ? Il est temps de satisfaire cette curiosit√© et d'explorer plus en d√©tail cette merveille technologique.

Lors de la cr√©ation d'un nouveau contr√¥leur, vous serez confront√© √† un √©cran qui peut sembler √©nigmatique au premier abord.

.. image:: img/app/app_blank.png

Vous verrez un kal√©idoscope de formes : de longs rectangles, des rectangles courts et de grands carr√©s, chacun portant un identifiant unique allant de A √† Q.

Vous vous demandez pourquoi tant de diversit√© ? Que signifient ces identifiants de A √† Q ?

Partons ensemble dans cette aventure exploratoire !

* **D√©coder les formes**

    Par exemple, touchez une zone rectangulaire longue. Comme ouvrir un coffre au tr√©sor, vous d√©couvrirez plusieurs widgets. Vous vous souvenez du **Slider** de notre dernier cours ? En le glissant √† gauche ou √† droite, vous contr√¥liez l'inclinaison de la cam√©ra du rover. Ensuite, il y a le **Gauge**, qui peut servir de compteur de vitesse pour votre rover. Et une multitude d'autres widgets !

    .. image:: img/app/app_long.png

    Touchez le rectangle plus court, et il r√©v√®le un autre ensemble de widgets. Le widget **Button**, tel un interrupteur binaire, √©met des commandes uniques, tandis que le widget **Microphone** peut √©couter vos commandes vocales pour contr√¥ler le rover, parmi d'autres widgets.

    .. image:: img/app/app_short.png

    Et le carr√©, vous demandez-vous ? Il abrite le widget **Joystick**, le widget D-pad et le widget Throttle. Et oui, il y a encore plus !

    .. image:: img/app/app_square.png

    Pour l'instant, ne vous inqui√©tez pas de la fonction ou de l'utilisation de chaque widget. Familiarisez-vous simplement avec les widgets h√©berg√©s par chaque forme.

* **Exploiter les widgets**

    Nous savons maintenant qu'il existe de nombreux widgets diff√©rents. √Ä quoi peuvent-ils servir ?

    Nous les classons en deux types : les widgets de contr√¥le et les widgets d'affichage.

    * Les **widgets de contr√¥le** vous permettent de manipuler l'application, puis le rover martien re√ßoit ces commandes et effectue les actions correspondantes.
    * Les **widgets d'affichage** permettent d'afficher des valeurs dans l'application, comme des valeurs de capteurs, etc.

    Pour une description d√©taill√©e de ces widgets, veuillez vous r√©f√©rer √† : |link_widgets_list|.

    Pour les fonctions, param√®tres, etc. associ√©s √† ces widgets, veuillez consulter : |link_ai_camera_library_api|.

* **Le r√¥le des identifiants**

    Chaque forme porte un identifiant en bas √† droite. Pourquoi, demandez-vous ? Comprenons cela avec un exemple.

    Lors de notre dernier cours, nous avons ajout√© un widget **Slider** dans la r√©gion **D**. Le code pour obtenir sa valeur ressemblait √† ceci :

        .. code-block:: arduino

            int16_t sliderD = aiCam.getSlider(REGION_D);

    Et si nous ajoutions un widget **Slider** dans la r√©gion **B** ? Comment le code changerait-il ? Il suffit de remplacer ``REGION_D`` par ``REGION_B``.

        .. code-block:: arduino

            int16_t sliderD = aiCam.getSlider(REGION_B);

    Simple, non ? Ces identifiants aident √† distinguer quel widget vous avez ajout√© dans quelle zone.

.. note::
    * Des instructions d√©taill√©es sur la cr√©ation et l'ajout de widgets, ainsi que la connexion et l'utilisation du SunFounder Controller, sont disponibles dans ``√âtape 3`` de ``Le√ßon 11``.
    * Pour des op√©rations plus approfondies, veuillez consulter |link_sc_page|.

**√âtape 2 : Contr√¥ler le Rover Martien avec deux manettes des gaz**

Maintenant que nous avons explor√© les widgets du SunFounder Controller, passons √† l'√©tape suivante en int√©grant deux widgets **Throttle** pour commander les mouvements du Rover Martien.

#. Placez un widget **Throttle** dans les r√©gions **K** et **Q**. Vous devrez appuyer sur le bouton |app_edit| en haut √† droite pour passer en mode √©dition, puis, une fois que vous aurez tout configur√©, cliquez sur |app_save| pour enregistrer vos modifications.

    .. image:: img/app/app_throttle.png

#. Comme nous pr√©voyons d'utiliser deux widgets **Throttle** pour contr√¥ler la mobilit√© du rover, ajustons la fonction qui g√®re les mouvements du rover en cons√©quence :

    .. code-block:: arduino

        // Fonction pour r√©gler la puissance des moteurs
        void carSetMotors(int8_t power_L, int8_t power_R) {
            // R√©gler la puissance pour le moteur gauche
            if (power_L >= 0) {
                SoftPWMSet(in1, map(power_L, 0, 100, 0, 255));
                SoftPWMSet(in2, 0);
            } else {
                SoftPWMSet(in1, 0);
                SoftPWMSet(in2, map(power_L, 0, -100, 0, 255));
            }

            // R√©gler la puissance pour le moteur droit
            if (power_R >= 0) {
                SoftPWMSet(in3, 0);
                SoftPWMSet(in4, map(power_R, 0, 100, 0, 255));
            } else {
                SoftPWMSet(in3, map(power_R, 0, -100, 0, 255));
                SoftPWMSet(in4, 0);
            }
        }

    D√©cortiquons la fonction ``carSetMotors()``. Cette fonction accepte deux arguments, ``power_L`` et ``power_R``, qui sont probablement les r√©glages de puissance pour les moteurs gauche et droit respectivement. Les valeurs de ces arguments vont vraisemblablement de -100 √† 100, o√π les valeurs n√©gatives indiquent un mouvement en marche arri√®re, 0 indique un arr√™t, et les valeurs positives indiquent un mouvement en avant.

    * R√©gler la puissance pour le moteur gauche :

        * Si ``power_L`` est sup√©rieur ou √©gal √† 0, le moteur gauche est r√©gl√© pour avancer.

        * ``SoftPWMSet(in1, map(power_L, 0, 100, 0, 255))`` utilise la fonction ``map`` d'Arduino pour mapper l'intervalle d'entr√©e (0 √† 100) √† l'intervalle de sortie (0 √† 255) - cela parce que les valeurs PWM dans Arduino sont comprises entre 0 (0 % de cycle de travail) et 255 (100 % de cycle de travail). Cette valeur mapp√©e est ensuite transmise √† la fonction ``SoftPWMSet`` avec ``in1``.

        * Si ``power_L`` est inf√©rieur √† 0, le moteur gauche est r√©gl√© pour reculer et l'intervalle d'entr√©e de la fonction ``map`` est maintenant de 0 √† -100.

    * R√©gler la puissance pour le moteur droit :

        * Cela suit la m√™me logique que pour r√©gler la puissance du moteur gauche, mais utilise ``in3`` et ``in4`` √† la place, et les valeurs de puissance d'entr√©e sont ``power_R`` au lieu de ``power_L``.

    Globalement, cette fonction prend deux valeurs de puissance des moteurs, les convertit en valeurs PWM appropri√©es, et d√©finit ces valeurs PWM sur les broches de contr√¥le des moteurs pour obtenir le mouvement souhait√©.

#. Dans la fonction ``onReceive()``, r√©cup√©rez les valeurs des deux widgets **Throttle** et utilisez-les comme puissance pour les moteurs gauche et droit du rover martien.

    .. code-block:: arduino
        :emphasize-lines: 9,10,13

        void onReceive() {
            // Obtenir la valeur du slider dans la r√©gion D
            int16_t sliderD = aiCam.getSlider(REGION_D);

            // D√©placer le servo √† l'angle indiqu√© par le slider
            myServo.write(int(sliderD));

            // Obtenir les valeurs des manettes des gaz pour gauche et droite
            int throttle_L = aiCam.getThrottle(REGION_K);
            int throttle_R = aiCam.getThrottle(REGION_Q);

            // R√©gler la puissance des moteurs
            carSetMotors(throttle_L, throttle_R);
        }

Voici le code complet :

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/c70d2598-a1f9-465a-83bb-4ebd38eb74fa/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Chaque fois que vous relancez le code, vous devez r√©p√©ter les quatre √©tapes suivantes :

* Avant de t√©l√©verser le code, assurez-vous que l'interrupteur est positionn√© vers la droite.

    .. image:: img/camera_upload.png

* Une fois le code t√©l√©vers√© avec succ√®s, passez l'interrupteur vers la gauche pour d√©marrer l'ESP32 CAM.
* Connectez-vous au r√©seau ``GalaxyRVR``.
* Connectez et lancez le contr√¥leur.

D'un simple mouvement du pouce sur vos widgets ``Throttle``, vous verrez le rover martien entrer en action, avan√ßant et pivotant avec un nouvel √©lan. Que l'exploration commence !

**√âtape 3 : Visualiser les donn√©es des capteurs**

Au cours de notre aventure avec le SunFounder Controller, nous avons interagi activement avec notre rover martien √† l'aide de widgets de contr√¥le, notamment des sliders pour ajuster l'inclinaison et des manettes pour diriger les mouvements du rover. Mais qu'en est-il de l'utilisation des widgets d'affichage pour obtenir un aper√ßu clair de l'environnement du rover ?

Voyons comment nous pouvons concr√©tiser cela en visualisant les valeurs des modules infrarouges (IR) d'√©vitement gauche et droit, ainsi que la distance mesur√©e par le module ultrasonique. Ces donn√©es en temps r√©el nous offriront une vue d'ensemble de l'environnement de fonctionnement du rover.

Voici comment nous pouvons y parvenir :

#. Commencez par ajouter trois widgets **Number** √† votre SunFounder Controller. N'oubliez pas que vous pouvez personnaliser leurs noms et unit√©s via le bouton de configuration.

    .. image:: img/app/app_show.png

#. Ensuite, passons au code. Commencez par importer les extraits de code des modules IR d'√©vitement et du module ultrasonique de nos le√ßons pr√©c√©dentes.

    .. code-block:: arduino

        ...
        // D√©finir la broche pour le module ultrasonique
        #define ULTRASONIC_PIN 10

        // D√©finir les broches pour les modules IR
        #define IR_RIGHT 7
        #define IR_LEFT 8

        void setup() {
            ...

            // D√©finir les broches des modules IR comme entr√©es
            pinMode(IR_RIGHT, INPUT);
            pinMode(IR_LEFT, INPUT);
        }

        float readSensorData() {
            // Un d√©lai de 4 ms est n√©cessaire, sinon la lecture peut √™tre de 0
            delay(4);

            // Passer en OUTPUT pour envoyer le signal
            pinMode(ULTRASONIC_PIN, OUTPUT);

            ...
        }

#. Dans la fonction ``onReceive()``, extrayez les valeurs des modules d'√©vitement et du capteur ultrasonique. Ensuite, mettez √† jour ces valeurs dans le dictionnaire ``sendDoc[]``. Les cl√©s ``N``, ``P`` et ``O`` correspondent aux codes r√©gionaux des trois widgets **Number** que vous avez ajout√©s.

    .. code-block:: arduino

        // Fonction ex√©cut√©e lors de la r√©ception des donn√©es du contr√¥leur
        void onReceive() {

            ...

            // Lire les valeurs des capteurs IR
            int leftValue = digitalRead(IR_LEFT);
            int rightValue = digitalRead(IR_RIGHT);
            aiCam.sendDoc["N"] = leftValue;
            aiCam.sendDoc["P"] = rightValue;
            
            // ultrason
            float distance = readSensorData();
            aiCam.sendDoc["O"] = distance;
        }

Voici le code complet :

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/6c867007-a0e8-4f85-980d-ec1cd1a70969/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Une fois le code t√©l√©vers√© avec succ√®s, lancez votre SunFounder Controller. Vous verrez alors appara√Ætre les valeurs en temps r√©el des modules d'√©vitement et la distance d√©tect√©e par le capteur ultrasonique, offrant une vue pr√©cise de l'environnement imm√©diat du rover.

.. image:: img/app/app_show_ir_ultrasonic.png

Avec cette √©tape derri√®re vous, vous avez ma√Ætris√© le monde des widgets d'affichage. N'h√©sitez pas √† exp√©rimenter avec diff√©rents widgets pour afficher les informations qui vous int√©ressent. Bonne exploration !

**√âtape 4 : R√©flexion et conclusion**

Dans cette le√ßon, nous avons approfondi notre compr√©hension du SunFounder Controller, en apprenant √† utiliser ses widgets pour non seulement piloter notre rover martien, mais aussi surveiller en temps r√©el les donn√©es environnementales de celui-ci.

Maintenant, voici un d√©fi pour vous :

Pourquoi ne pas ajouter des widgets Switch √† votre SunFounder Controller ? Avec ces interrupteurs activ√©s, le rover pourrait basculer entre les modes d'√©vitement et de suivi. Ou encore, utilisez les interrupteurs pour contr√¥ler la bande lumineuse - en l'allumant ou en l'√©teignant, voire en changeant sa couleur !

Avez-vous confiance pour relever ce d√©fi ?

Nous avons h√¢te de vous voir triompher !
