.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez-vous dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Soyez parmi les premiers √† d√©couvrir les nouvelles annonces de produits et √† b√©n√©ficier d'aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Le√ßon 3 : Entrer dans le Monde de l'Arduino et du Codage
==============================================================

Lors de notre pr√©c√©dente le√ßon, nous avons construit avec succ√®s le syst√®me de suspension Rocker-Bogie. 
Cependant, pour le rendre fonctionnel, nous devons lui fournir de l'√©nergie, une carte de contr√¥le et le programmer pour dicter ses mouvements.

Dans cette le√ßon, nous allons nous familiariser avec la carte de contr√¥le et la plateforme de programmation que nous allons utiliser.

.. image:: img/upload_blink.gif

Objectifs du cours
----------------------

* Comprendre les concepts de base et les fonctions d'Arduino.
* D√©couvrir la carte SunFounder R3.
* Installer l'IDE Arduino et se familiariser avec son interface.
* Apprendre les r√®gles de base de la syntaxe de la programmation Arduino.



Mat√©riel du cours
--------------------

* Carte SunFounder R3
* IDE Arduino
* C√¢ble USB
* Ordinateur

Introduction √† Arduino
------------------------------------------

Vous avez peut-√™tre souvent entendu le terme "Arduino" dans diff√©rents contextes, mais qu'est-ce que c'est exactement et pourquoi est-il devenu si populaire ?

Arduino est une plateforme √©lectronique open-source facile √† utiliser, tant pour les applications mat√©rielles que logicielles. Elle est con√ßue pour cr√©er des dispositifs num√©riques et des objets interactifs qui peuvent percevoir et contr√¥ler le monde physique qui les entoure.

D√©mystifions tout cela :

* **Open-source** : Imaginez l'open-source comme un jardin communautaire. Tout le monde peut l'utiliser, y contribuer et en b√©n√©ficier. Avec l'open-source, les conceptions des pi√®ces physiques (le mat√©riel) et les instructions de programmation (le logiciel) sont partag√©es librement. Cela signifie que chacun peut les utiliser, les am√©liorer ou cr√©er ses propres versions. Il s'agit de partage et de cr√©ativit√© !

    .. image:: img/arduino_oscomm.png
        :width: 400
        :align: center

* **Microcontr√¥leur** : Un microcontr√¥leur est comme le cerveau de l'Arduino. C'est un petit ordinateur capable d'ex√©cuter des logiciels simples. Bien qu'il ne soit pas aussi puissant que l'ordinateur que vous utilisez actuellement, il est parfait pour des t√¢ches simples comme comprendre des messages provenant de capteurs ou allumer une LED (une petite lumi√®re).

    .. image:: img/arduino_micro.jpg
        :width: 500
        :align: center

* **Carte de d√©veloppement** : Imaginez la carte de d√©veloppement comme le corps qui soutient le cerveau. C'est la carte sur laquelle repose le microcontr√¥leur, et elle contient d'autres composants qui aident le microcontr√¥leur √† interagir avec le monde. Ces composants incluent des oscillateurs (qui aident √† la synchronisation), des r√©gulateurs de tension (qui contr√¥lent les niveaux d'alimentation) et des connecteurs pour l'alimentation et les donn√©es (comme les prises et interrupteurs de votre maison).

    .. image:: img/arduino_board.png
        :width: 600
        :align: center

* **IDE Arduino** : C'est un peu comme la salle de classe de votre Arduino. C'est un programme qui s'ex√©cute sur votre ordinateur, o√π vous pouvez √©crire les instructions qui diront √† votre Arduino quoi faire. Ces instructions sont √©crites dans un langage de programmation bas√© sur C++. Une fois que vous avez r√©dig√© vos instructions, vous pouvez les envoyer √† la carte Arduino via un c√¢ble USB, comme si vous rendiez vos devoirs !

    .. image:: img/arduino_ide_icon.png
        :width: 200
        :align: center

Maintenant que vous comprenez ces id√©es de base, vous √™tes bien parti pour devenir un expert Arduino !

Ensuite, nous nous plongerons dans des activit√©s pratiques pour vous familiariser avec la programmation Arduino et les principes d'ing√©nierie.
Pr√©parez-vous pour un parcours d'apprentissage passionnant !

Familiarisation avec la carte SunFounder R3
------------------------------------------------------------------

Dans votre kit, vous trouverez une carte bleue, ressemblant √† une petite ville remplie de petites tours m√©talliques et de chemins. Mais ne vous laissez pas intimider ! Voici la carte de d√©veloppement SunFounder R3, un type de carte Arduino qui peut √™tre utilis√© pour programmer et contr√¥ler une vaste gamme de dispositifs √©lectroniques et de projets.

Comprenons ses caract√©ristiques cl√©s en termes simples :

.. image:: img/sf_r3.jpg
    :width: 800

* **14 broches num√©riques** : Consid√©rez ces broches comme de petits messagers. Elles peuvent √™tre programm√©es pour envoyer (sortie) ou recevoir (entr√©e) des messages simples de type "oui" ou "non" vers d'autres parties de votre Rover martien. Ces messages sont en fait des signaux "marche" ou "arr√™t" que la carte utilise pour contr√¥ler des √©l√©ments tels que les lumi√®res ou les moteurs.

    * Six de ces broches sp√©ciales peuvent m√™me envoyer des messages dans un code sp√©cial appel√© PWM (modulation de largeur d'impulsion). Ce code peut √™tre utilis√© pour contr√¥ler la luminosit√© d'une lumi√®re, la vitesse d'un moteur ou m√™me la position d'une pi√®ce mobile.


* **6 broches analogiques** : Ces broches sont comme les six sens sp√©ciaux de la carte. Elles peuvent lire des signaux provenant de diff√©rents types de capteurs (comme un capteur de temp√©rature) et les traduire dans un langage que la carte peut comprendre et utiliser dans sa programmation.

* **Connexion USB** : C'est comme le cordon ombilical de la carte. Vous pouvez l'utiliser pour connecter votre carte √† votre ordinateur. Cette connexion permet √† votre ordinateur de "former" la carte en lui envoyant un programme que vous avez √©crit.

* **Prise d'alimentation** : C'est la source d'√©nergie de la carte. Vous pouvez connecter une alimentation, comme une batterie ou un adaptateur AC-DC, √† cette prise pour "nourrir" votre carte avec l'√©lectricit√© dont elle a besoin pour fonctionner.

* **En-t√™te ICSP** : C'est comme une entr√©e sp√©ciale pour programmer la carte. Elle peut √™tre utilis√©e si vous disposez d'un programmateur externe (un dispositif sp√©cial pour "former" la carte).

* **Bouton de r√©initialisation** : Si vous appuyez dessus, c'est comme dire √† la carte d'oublier ce qu'elle faisait et de recommencer son programme depuis le d√©but.

Avec ces notions de base, vous √™tes pr√™t √† commencer vos aventures en programmation avec la carte SunFounder R3 !

Installer l'IDE Arduino
-----------------------------------------------

Maintenant que nous comprenons ce qu'est Arduino et √† quoi sert la carte Arduino, il est temps de mettre ces connaissances en pratique. Nous allons installer l'IDE Arduino, qui est le logiciel que nous utiliserons pour programmer notre carte Arduino.

La derni√®re version de l'IDE Arduino est la version 2.0. Elle est riche en fonctionnalit√©s et tr√®s conviviale. Cependant, elle a quelques exigences syst√®me :

    * Windows - Win 10 et versions plus r√©centes, 64 bits
    * Linux - 64 bits
    * Mac OS X - Version 10.14 : "Mojave" ou plus r√©cente, 64 bits

Pour commencer, suivez ces √©tapes :

#. Rendez-vous sur |link_download_arduino| et t√©l√©chargez l'IDE pour votre version de syst√®me d'exploitation.

    .. image:: img/sp_001.png

**Pour les utilisateurs de Windows :**

    #. Une fois que vous avez t√©l√©charg√© le fichier (il sera nomm√© quelque chose comme ``arduino-ide_xxxx.exe``), double-cliquez dessus pour d√©marrer le processus d'installation.

    #. Vous verrez l'**Accord de licence**. Prenez un moment pour le lire et, si vous √™tes d'accord avec les termes, cliquez sur "J'accepte".

        .. image:: img/sp_002.png

    #. Ensuite, vous serez invit√© √† choisir les options d'installation. Laissez-les telles qu'elles sont et cliquez sur "Suivant".

        .. image:: img/sp_003.png

    #. Choisissez o√π vous voulez installer le logiciel. Il est g√©n√©ralement pr√©f√©rable de l'installer sur un autre disque que celui utilis√© par votre syst√®me.

        .. image:: img/sp_004.png

    #. Cliquez sur "Installer" pour d√©marrer l'installation. Une fois termin√©e, cliquez sur "Terminer".

        .. image:: img/sp_005.png

**Pour les utilisateurs de macOS :**

    Double-cliquez sur le fichier t√©l√©charg√© (qui s'appellera quelque chose comme ``arduino_ide_xxxx.dmg``). Suivez les instructions √† l'√©cran pour glisser l'application **Arduino IDE** dans le dossier **Applications**. Apr√®s quelques secondes, l'IDE Arduino sera install√© avec succ√®s.

    .. image:: img/macos_install_ide.png
        :width: 800

**Pour les utilisateurs de Linux :**

    Vous pouvez trouver un tutoriel d√©taill√© sur l'installation de l'IDE Arduino 2.0 sur un syst√®me Linux ici : |link_arduino_linux|.

D√©couverte du terrain de jeu Arduino (IDE)
----------------------------------------------------------------

Imaginons ensemble que l'IDE Arduino est un terrain de jeu magique rempli d'outils et de gadgets pr√™ts √† √™tre explor√©s et utilis√©s. Je vais vous guider pour comprendre chaque recoin de ce terrain de jeu.

.. image:: img/ide-2-overview.png
    :width: 800

Voici ce que vous trouverez dans votre terrain de jeu :

* **V√©rifier / T√©l√©charger** - Imaginez ceci comme votre ascenseur magique. Il prend le code que vous avez √©crit et l'envoie directement vers votre carte Arduino.
* **S√©lectionner la carte et le port** - C'est votre carte au tr√©sor. Elle montre automatiquement les cartes Arduino que vous avez branch√©es √† votre ordinateur et indique leur num√©ro de port.
* **Sketchbook** - C'est votre biblioth√®que personnelle. C'est l√† que tous vos sketches (programmes) sont stock√©s sur votre ordinateur. De plus, il peut se connecter au cloud Arduino, vous permettant de r√©cup√©rer vos sketches depuis le monde en ligne.
* **Gestionnaire de cartes** - Pensez √† cela comme votre bo√Æte √† outils. C'est ici que vous pouvez trouver et installer diff√©rents packages pour votre Arduino.
* **Gestionnaire de biblioth√®ques** - C'est votre coffre au tr√©sor infini. Des milliers de biblioth√®ques cr√©√©es par Arduino et sa communaut√© vous y attendent. Besoin d'un outil ou d'un mat√©riel pour votre code ? Plongez-y et trouvez-le !
* **D√©bogueur** - Imaginez avoir un super pouvoir qui vous permet de tester et de d√©boguer votre code en temps r√©el, en trouvant et en corrigeant les probl√®mes au fur et √† mesure. C'est ce que fait cet outil !
* **Recherche** - C'est votre loupe. Elle vous aide √† rechercher des mots-cl√©s dans votre code.
* **Ouvrir le moniteur s√©rie** - C'est comme votre appareil de communication. Il ouvre un nouvel onglet qui permet √† votre ordinateur et √† la carte Arduino d'envoyer des messages en retour.

Maintenant que nous avons eu un aper√ßu du terrain de jeu, il est temps de plonger et de commencer √† cr√©er !

T√©l√©chargez votre premier sketch
-----------------------------------------------

C'est parti pour s'amuser ! Nous allons faire clignoter une LED - c'est un peu comme dire "Hello, World!" dans le monde Arduino.

La plupart des cartes Arduino ont une LED int√©gr√©e sur la broche 13, ce qui en fait une bonne premi√®re exp√©rience.

.. image:: img/1_led.jpg
    :width: 400
    :align: center

D√©composons cela :

#. **Branchez la carte** : Connectez votre carte SunFounder R3 √† votre ordinateur √† l'aide d'un c√¢ble USB. C'est ainsi que nous allons alimenter notre carte et lui envoyer notre programme (aussi appel√© "sketch"). Vous avez peut-√™tre l'impression de simplement brancher un gadget informatique, mais croyez-moi, vous vous connectez √† un monde de possibilit√©s !

    .. image:: img/connect_board_pc.gif

#. **Trouvez le sketch d'exemple** : Dans l'IDE Arduino, allez √† **Fichier** -> **Exemples** -> **Basic** -> **Blink**. Ce qui s'affiche est un programme pr√™t √† l'emploi que nous allons modifier. C'est un peu comme un g√¢teau d√©j√† pr√©par√© que nous allons d√©corer !

    .. image:: img/open_blink.png

#. **Comprenez le sketch** : Regardez le code dans cette nouvelle fen√™tre. Il dit √† Arduino d'allumer la LED int√©gr√©e (qui est sur la broche 13) pendant une seconde, puis de l'√©teindre pendant une seconde, et de r√©p√©ter ce processus. C'est comme envoyer du code Morse, mais avec de la lumi√®re !

    .. image:: img/led_blink.png

#. **T√©l√©chargez le sketch** : Une fois que vous avez s√©lectionn√© la bonne carte et le bon port, il vous suffit de cliquer sur le bouton de t√©l√©chargement. C'est aussi simple que d'envoyer une lettre ; vous transmettez vos instructions √† la carte Arduino ! La plupart du temps, le syst√®me d√©tecte automatiquement la carte et le port pour vous.

    .. image:: img/upload_blink.gif

#. **Regardez-le fonctionner** : Si tout se passe bien, vous verrez la LED sur votre carte Arduino commencer √† clignoter. C'est comme si votre Arduino vous faisait un clin d'≈ìil !

    .. image:: img/blink_led.gif

Vous avez fait un excellent travail ! Vous venez de lancer votre premier programme Arduino, faisant de vous un v√©ritable programmeur ! Alors, quelle est la suite ? Nous ne faisons que gratter la surface de ce qu'Arduino peut faire. Pr√™t pour le prochain d√©fi ?

Quelques faits amusants sur la programmation Arduino
--------------------------------------------------------

D√©couvrons quelques secrets int√©ressants sur la programmation Arduino !

* Magie du code : ``setup()`` et ``loop()``

    Un sketch Arduino, ou un morceau de code, est comme une pi√®ce de th√©√¢tre en deux actes :

    * ``setup()`` : C'est l'acte 1, la sc√®ne d'ouverture. Il ne se produit qu'une seule fois, lorsque votre carte Arduino se r√©veille pour la premi√®re fois. Il est utilis√© pour pr√©parer la sc√®ne en configurant des √©l√©ments comme les modes de broches et les biblioth√®ques.
    * ``loop()`` : Apr√®s l'acte 1, nous passons √† l'acte 2, qui se r√©p√®te en boucle jusqu'au rideau final (qui ne tombe que si nous coupons l'alimentation ou appuyons sur le bouton de r√©initialisation !). Cette partie du code est comme la sc√®ne principale o√π l'action se d√©roule vraiment.

    Mais rappelez-vous, m√™me s'il n'y a pas de magie (code) dans le ``setup()`` ou le ``loop()``, nous devons toujours les garder. Ils sont comme la sc√®ne - m√™me une sc√®ne vide reste une sc√®ne.

    .. code-block:: arduino
    
        void setup() {
            // initialiser la broche num√©rique LED_BUILTIN comme une sortie.
            pinMode(LED_BUILTIN, OUTPUT);

            digitalWrite(LED_BUILTIN, HIGH);  // allumer la LED (HIGH est le niveau de tension)
            delay(1000);                      // attendre une seconde
            digitalWrite(LED_BUILTIN, LOW);   // √©teindre la LED en passant la tension √† LOW
            delay(1000);                      // attendre une seconde
        }

        // la fonction loop s'ex√©cute en boucle √† l'infini
        void loop() {

        }

* Signes de ponctuation en programmation

    Tout comme dans un livre, Arduino utilise des signes de ponctuation sp√©ciaux pour donner du sens au code :

    * ``Points-virgules (;)`` : Ce sont comme les points dans une histoire. Ils disent √† l'Arduino "D'accord, j'ai fini cette action. Quelle est la suite ?"
    * ``Accolades {}`` : Ce sont comme le d√©but et la fin d'un chapitre. Elles encadrent les morceaux de code ensemble, marquant o√π une section commence et se termine.

    Si vous oubliez certains de ces signes de ponctuation, pas de panique ! L'Arduino est comme un professeur bienveillant qui v√©rifie votre travail, pointe les erreurs et vous montre comment les corriger. Tout cela fait partie de l'aventure d'apprentissage !

    .. image:: img/blink_error.gif

* √Ä propos des fonctions

    Imaginez ces fonctions comme des sorts magiques. Chaque sort a un effet sp√©cifique dans notre aventure Arduino :

    * ``pinMode()`` : Ce sort d√©cide si une broche est en ENTR√âE ou en SORTIE. C'est comme d√©cider si un personnage dans notre histoire parle (SORTIE) ou √©coute (ENTR√âE).
    * ``digitalWrite()`` : Ce sort peut mettre une broche en HIGH (activ√©e) ou en LOW (d√©sactiv√©e), comme allumer ou √©teindre une lumi√®re magique.
    * ``delay()`` : Ce sort fait faire une pause √† l'Arduino pendant un certain temps, comme prendre une petite sieste au milieu de notre histoire.

    Tout comme dans un grimoire, vous pouvez trouver tous ces sorts et bien d'autres dans le |link_arduino_web|. Plus vous connaissez de sorts, plus vos aventures Arduino seront passionnantes !

* Commentaires : Nos messages secrets

    Nous avons √©galement un langage secret en programmation, appel√© ``commentaires``. Ce sont des messages que nous pouvons √©crire dans notre code en utilisant ``//`` ou ``/* */``. La partie magique ? L'Arduino les ignore compl√®tement ! C'est un excellent endroit pour laisser des notes pour vous-m√™me ou pour expliquer ce que font les parties d√©licates du code.

* Lisibilit√© du code : Rendre le code convivial

    Bien que vous puissiez √©crire votre code comme bon vous semble (par exemple, placer des points-virgules sur une ligne s√©par√©e ne causera pas d'erreur), il est important de garder √† l'esprit la lisibilit√© du code.

    .. image:: img/blink_noerror.gif

    Tout comme √©crire une bonne histoire, la fa√ßon dont nous √©crivons le code peut le rendre amusant et facile √† lire, ou ennuyeux et difficile. Voici quelques conseils pour rendre votre code plus convivial :

    * Utilisez une indentation correcte pour organiser vos phrases en paragraphes soign√©s. Cela aide le lecteur √† comprendre o√π une section se termine et o√π une autre commence.
    * Utilisez des noms de variables explicites. C'est comme donner un nom appropri√© √† un personnage dans une histoire.
    * Gardez vos fonctions petites et simples, comme des chapitres courts et agr√©ables dans un livre.
    * Laissez des commentaires pour les parties d√©licates. C'est comme laisser une note de bas de page pour expliquer un mot difficile.

Rappelez-vous, nous ne codons pas seulement pour les machines, mais aussi pour les humains, alors assurons-nous que notre code raconte une histoire claire et compr√©hensible !

**R√©fl√©chir et s'am√©liorer**

Prendre un moment pour r√©fl√©chir √† notre parcours peut nous donner des perspectives que nous pourrions manquer dans l'effervescence de l'exploration. Posez-vous ces questions :

* Quelle a √©t√© la partie la plus int√©ressante de cette aventure Arduino ?
* Avez-vous rencontr√© des d√©fis en cours de route ? Comment les avez-vous surmont√©s ?
* Pourriez-vous expliquer √† un ami ce qu'est Arduino, ce que fait l'IDE Arduino ou comment ex√©cuter du code Arduino ?
* Comment d√©cririez-vous votre premi√®re exp√©rience de programmation Arduino ?
* Qu'avez-vous envie d'apprendre de plus sur Arduino ?

En r√©fl√©chissant √† ces questions, vous approfondissez votre compr√©hension et vous vous pr√©parez pour de futures explorations. N'oubliez jamais qu'il n'y a pas de "mauvaises" r√©ponses dans la r√©flexion ‚Äì c'est votre voyage personnel apr√®s tout !
