.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones exclusivas**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.


Lecci√≥n 3: Introducci√≥n al Mundo de Arduino y la Programaci√≥n
================================================================

En nuestra lecci√≥n anterior, construimos con √©xito el sistema de suspensi√≥n Rocker-Bogie. Sin embargo, para que funcione, necesitamos proporcionarle energ√≠a, una placa de control y una programaci√≥n que dicte sus movimientos.

En esta lecci√≥n, nos familiarizaremos con la placa de control y la plataforma de programaci√≥n que utilizaremos.

.. image:: img/upload_blink.gif

Objetivos del curso
---------------------

* Comprender los conceptos b√°sicos y las funciones de Arduino.
* Conocer la Placa SunFounder R3.
* Instalar Arduino IDE y familiarizarse con su interfaz.
* Aprender las reglas b√°sicas de sintaxis para la programaci√≥n en Arduino.



Materiales del curso
------------------------

* Placa SunFounder R3
* Arduino IDE
* Cable USB
* Computadora


Introducci√≥n a Arduino
--------------------------

Es posible que hayas escuchado el t√©rmino "Arduino" en varios contextos, pero ¬øqu√© es exactamente y por qu√© se ha vuelto tan popular?

Arduino es una plataforma de electr√≥nica de c√≥digo abierto que es f√°cil de usar tanto para aplicaciones de hardware como de software. Est√° dise√±ada para crear dispositivos digitales y objetos interactivos que pueden detectar y controlar el mundo f√≠sico a su alrededor.

Vamos a desglosarlo:

* **C√≥digo abierto**: Piensa en c√≥digo abierto como un jard√≠n comunitario. Todos pueden usarlo, contribuir y beneficiarse de √©l. Con el c√≥digo abierto, tanto los dise√±os de las partes f√≠sicas (hardware) como las instrucciones de programaci√≥n (software) se comparten libremente. Esto significa que cualquiera puede usarlos, mejorarlos o crear sus propias versiones. ¬°Todo se trata de compartir y ser creativo!

    .. image:: img/arduino_oscomm.png
        :width: 400
        :align: center

* **Microcontrolador**: Un microcontrolador es como el cerebro del Arduino. Es una peque√±a computadora que puede ejecutar software simple. Aunque no es tan potente como la computadora que est√°s usando, es perfecta para tareas simples, como interpretar mensajes de sensores o encender un LED (una peque√±a luz).

    .. image:: img/arduino_micro.jpg
        :width: 500
        :align: center

* **Placa de desarrollo**: Imagina la placa de desarrollo como el cuerpo que soporta el cerebro. Es la placa donde se encuentra el microcontrolador y contiene otras partes que ayudan al microcontrolador a interactuar con el mundo. Estas partes incluyen cosas como osciladores (que ayudan con la sincronizaci√≥n), reguladores de voltaje (que controlan los niveles de energ√≠a) y conectores para energ√≠a y datos (como los enchufes y switches en tu casa).

    .. image:: img/arduino_board.png
        :width: 600
        :align: center

* **Arduino IDE**: Este es como el sal√≥n de clases de tu Arduino. Es un programa que se ejecuta en tu computadora, donde puedes escribir las instrucciones que le dicen al Arduino qu√© hacer. Estas instrucciones se escriben en un lenguaje de programaci√≥n basado en C++. Una vez que hayas escrito tus instrucciones, puedes enviarlas a la placa Arduino usando un cable USB, ¬°como si estuvieras entregando tu tarea!

    .. image:: img/arduino_ide_icon.png
        :width: 200
        :align: center

Ahora que comprendes estas ideas b√°sicas, ¬°est√°s en camino de convertirte en un experto en Arduino!

Luego, realizaremos actividades pr√°cticas para que te familiarices con la programaci√≥n en Arduino y los principios de ingenier√≠a. 
¬°Prep√°rate para un emocionante viaje de aprendizaje!



Conociendo tu Placa SunFounder R3
--------------------------------------------

Dentro de tu kit, encontrar√°s una placa azul, que parece una peque√±a ciudad llena de torres met√°licas y caminos. Pero no te intimides, ¬°esta es la placa de desarrollo SunFounder R3! Es una especie de placa Arduino que puede utilizarse para programar y controlar una amplia variedad de dispositivos y proyectos electr√≥nicos.

Vamos a entender sus caracter√≠sticas clave de manera sencilla:

.. image:: img/sf_r3.jpg
    :width: 800

* **14 Pines digitales**: Piensa en estos pines como peque√±os mensajeros. Pueden programarse para enviar (salida) o recibir (entrada) mensajes simples de "s√≠" o "no" a otras partes de tu rover. Estos mensajes son en realidad se√±ales de "encendido" o "apagado" que la placa usa para controlar cosas como luces o motores.

    * Seis de estos pines especiales pueden incluso enviar mensajes en un tipo de c√≥digo secreto llamado PWM (Modulaci√≥n por Ancho de Pulso). Este c√≥digo puede utilizarse para controlar qu√© tan brillante es una luz, qu√© tan r√°pido gira un motor o incluso d√≥nde se posiciona una parte m√≥vil.

* **6 Pines anal√≥gicos**: Estos pines son como los seis sentidos especiales de la placa. Pueden leer se√±ales de diferentes tipos de sensores (como un sensor de temperatura) y luego traducir estas se√±ales a un lenguaje que la placa puede entender y usar en su programaci√≥n.

* **Conexi√≥n USB**: Esta es como el cord√≥n umbilical de la placa. Puedes usarlo para conectar tu placa a tu computadora. Esta conexi√≥n permite que tu computadora "ense√±e" a la placa qu√© hacer envi√°ndole un programa que has escrito.

* **Entrada de alimentaci√≥n**: Esta es la fuente de alimentaci√≥n de la placa. Puedes conectar una fuente de energ√≠a, como una bater√≠a o un adaptador de CA a CC, para "alimentar" tu placa con la electricidad que necesita para funcionar.

* **Encabezado ICSP**: Es como una entrada especial para programar la placa. Puede utilizarse si tienes un programador externo (un dispositivo especial para "ense√±ar" a la placa).

* **Bot√≥n de reinicio**: Si lo presionas, es como decirle a la placa que olvide lo que estaba haciendo y que comience su programa desde el principio.

Con estos conceptos b√°sicos, ¬°estar√°s listo para comenzar tus aventuras de programaci√≥n con la placa SunFounder R3!

.. _install_arduino_ide:

Instalar Arduino IDE
-------------------------

Ahora que entendemos qu√© es Arduino y la placa Arduino, es hora de comenzar a poner en pr√°ctica ese conocimiento. Vamos a instalar el Arduino IDE, que es el software que utilizaremos para programar nuestra placa Arduino.

La √∫ltima versi√≥n del Arduino IDE es la versi√≥n 2.0. Est√° repleta de funciones y es muy f√°cil de usar. Sin embargo, debes saber que tiene algunos requisitos del sistema:

    * Windows: Win 10 o m√°s reciente, 64 bits
    * Linux: 64 bits
    * Mac OS X: Versi√≥n 10.14 "Mojave" o m√°s reciente, 64 bits

Para comenzar, sigue estos pasos:

#. Visita |link_download_arduino| y descarga el IDE para tu versi√≥n de sistema operativo.

    .. image:: img/sp_001.png

**Para usuarios de Windows:**

    #. Una vez que hayas descargado el archivo (se llamar√° algo como ``arduino-ide_xxxx.exe``), haz doble clic en √©l para iniciar el proceso de instalaci√≥n.

    #. Ver√°s el **Acuerdo de Licencia**. T√≥mate un momento para leerlo, y si est√°s de acuerdo con los t√©rminos, haz clic en "Acepto".

        .. image:: img/sp_002.png

    #. A continuaci√≥n, se te pedir√° que elijas las opciones de instalaci√≥n. D√©jalas como est√°n y haz clic en "Siguiente".

        .. image:: img/sp_003.png

    #. Elige d√≥nde deseas instalar el software. Generalmente, es mejor instalarlo en una unidad diferente a la que usa tu sistema.

        .. image:: img/sp_004.png

    #. Haz clic en "Instalar" para comenzar la instalaci√≥n. Una vez que haya terminado, haz clic en "Finalizar".

        .. image:: img/sp_005.png

**Para usuarios de macOS:**

    Haz doble clic en el archivo descargado (se llamar√° algo como ``arduino_ide_xxxx.dmg``). Sigue las instrucciones en pantalla para arrastrar la aplicaci√≥n **Arduino IDE** a la carpeta **Aplicaciones**. Despu√©s de unos segundos, el Arduino IDE estar√° instalado correctamente.

    .. image:: img/macos_install_ide.png
        :width: 800

**Para usuarios de Linux:**

    Puedes encontrar un tutorial detallado sobre c√≥mo instalar el Arduino IDE 2.0 en un sistema Linux aqu√≠: |link_arduino_linux|.


Descubriendo el "Parque de Juegos" del Arduino IDE
------------------------------------------------------

Imaginemos juntos que el Arduino IDE es un parque de juegos lleno de herramientas y gadgets esperando a que los exploremos y juguemos con ellos. A continuaci√≥n, te guiar√© para que entiendas cada rinc√≥n de este parque.

.. image:: img/ide-2-overview.png
    :width: 800

Aqu√≠ encontrar√°s lo siguiente en tu "parque de juegos":

* **Verificar / Subir**: Imagina esto como tu elevador m√°gico. Toma el c√≥digo que has escrito y lo sube a tu placa Arduino.
* **Seleccionar Placa y Puerto**: Este es tu mapa del tesoro. Muestra autom√°ticamente las placas Arduino que has conectado a tu computadora y te dice su n√∫mero de puerto.
* **Cuaderno de bocetos**: Esta es tu biblioteca personal. Aqu√≠ se almacenan todos tus bocetos (programas) en tu computadora. Adem√°s, puede conectarse a la Nube de Arduino para que puedas obtener tus bocetos del mundo en l√≠nea tambi√©n.
* **Administrador de placas**: Piensa en esto como tu caja de herramientas. Aqu√≠ puedes encontrar e instalar diferentes paquetes para tu Arduino.
* **Administrador de bibliotecas**: Este es tu cofre del tesoro interminable. Miles de bibliotecas hechas por Arduino y su comunidad te esperan aqu√≠. ¬øNecesitas una herramienta o material para tu c√≥digo? ¬°Sum√©rgete y encu√©ntralo!
* **Depurador**: Imagina que tuvieras un superpoder que te permitiera probar y depurar tu c√≥digo en tiempo real, encontrando y solucionando problemas a medida que ocurren. ¬°Eso es lo que hace esta herramienta!
* **Buscar**: Piensa en esto como tu lupa. Te ayuda a buscar palabras clave en tu c√≥digo.
* **Abrir Monitor Serial**: Este es como tu dispositivo de comunicaci√≥n. Abre una nueva pesta√±a que permite a tu computadora y a tu placa Arduino enviarse mensajes entre s√≠.

Ahora que hemos echado un vistazo a este parque de juegos, ¬°es hora de sumergirnos y comenzar a crear!


Sube tu Primer Boceto
------------------------

¬°Es hora de divertirnos! Vamos a hacer que un LED parpadee, ¬°es como decir "¬°Hola, Mundo!" en el mundo de Arduino!

La mayor√≠a de las placas Arduino tienen un LED incorporado en el pin 13, lo que hace que este sea un buen experimento inicial.

.. image:: img/1_led.jpg
    :width: 400
    :align: center

Desglos√©moslo:

#. **Con√©ctalo**: Conecta tu placa SunFounder R3 a tu computadora usando un cable USB. Esta es la forma en que daremos energ√≠a a nuestra placa y le enviaremos nuestro programa (tambi√©n llamado "boceto"). Podr√≠as sentir que solo est√°s conectando un gadget de computadora, ¬°pero cr√©eme, est√°s conectando a un mundo de posibilidades!

    .. image:: img/connect_board_pc.gif

#. **Encuentra el boceto de ejemplo**: En el Arduino IDE, ve a **Archivo** -> **Ejemplos** -> **B√°sico** -> **Parpadeo**. Lo que ver√°s que aparece es un programa listo para usar que vamos a modificar. ¬°Es como recibir un pastel listo para decorar!

    .. image:: img/open_blink.png

#. **Entiende el boceto**: Mira el c√≥digo en esta nueva ventana. Le dice al Arduino que encienda el LED incorporado (que est√° en el pin 13) durante un segundo, luego lo apague durante un segundo y repita. ¬°Es como enviar c√≥digo Morse, pero con luz!

    .. image:: img/led_blink.png

#. **Sube el boceto**: Una vez que hayas seleccionado la placa y el puerto correctos, solo haz clic en el bot√≥n de subir. Es tan f√°cil como enviar una carta; ¬°est√°s entregando tus instrucciones a la placa Arduino! La mayor√≠a de las veces, el sistema detectar√° autom√°ticamente la placa y el puerto por ti.

    .. image:: img/upload_blink.gif

#. **M√≠ralo funcionar**: Si todo va bien, ver√°s que el LED en tu placa Arduino comienza a parpadear. ¬°Es como si tu Arduino te estuviera gui√±ando un ojo!

    .. image:: img/blink_led.gif

¬°Has hecho un gran trabajo! Acabas de ejecutar tu primer programa en Arduino, ¬°lo que te convierte en un programador de verdad! ¬øQu√© sigue? Apenas estamos rascando la superficie de lo que Arduino puede hacer. ¬øListo para el pr√≥ximo desaf√≠o?


Algunos Datos Divertidos sobre la Programaci√≥n en Arduino
--------------------------------------------------------------

¬°Es hora de descubrir algunos secretos interesantes sobre la programaci√≥n en Arduino!

* Magia del C√≥digo: ``setup()`` y ``loop()``

    Un boceto en Arduino, o un pedazo de c√≥digo, es como una obra de teatro de dos actos:

    * ``setup()``: Este es el Acto 1, la escena de apertura. Solo ocurre una vez, cuando tu placa Arduino se despierta por primera vez. Se utiliza para preparar cosas como modos de pines y bibliotecas.
    * ``loop()``: Despu√©s del Acto 1, pasamos al Acto 2 que se repite en un bucle hasta que caiga el tel√≥n final (¬°lo cual solo ocurre si apagamos la energ√≠a o presionamos el bot√≥n de reinicio!). Esta parte del c√≥digo es como la parte principal de nuestra obra, donde ocurre toda la acci√≥n.

    Pero recuerda, incluso si no hay magia (c√≥digo) en el ``setup()`` o ``loop()``, a√∫n necesitamos mantenerlos. Son como el escenario: incluso un escenario vac√≠o sigue siendo un escenario.

    .. code-block:: arduino
    
        void setup() {
            // inicializar el pin digital LED_BUILTIN como salida.
            pinMode(LED_BUILTIN, OUTPUT);

            digitalWrite(LED_BUILTIN, HIGH);  // encender el LED (HIGH es el nivel de voltaje)
            delay(1000);                      // esperar un segundo
            digitalWrite(LED_BUILTIN, LOW);   // apagar el LED haciendo que el voltaje sea LOW
            delay(1000);                      // esperar un segundo
        }

        // la funci√≥n loop se ejecuta una y otra vez
        void loop() {

        }

* Puntuaci√≥n en el C√≥digo

    Al igual que en un libro de cuentos, Arduino usa signos de puntuaci√≥n especiales para darle sentido al c√≥digo:

    * ``Punto y coma (;)``: Estos son como los puntos finales en una historia. Le dicen al Arduino "Est√° bien, he terminado con esta acci√≥n. ¬øQu√© sigue?".
    * ``Llaves {}``: Estas son como el principio y el final de un cap√≠tulo. Envuelven trozos de c√≥digo juntos, marcando d√≥nde comienza y termina una secci√≥n.

    Si te olvidas de alguno de estos signos de puntuaci√≥n, ¬°no te preocupes! El Arduino es como un profesor amigable que revisar√° tu trabajo, se√±alar√° d√≥nde est√°n los errores y te mostrar√° c√≥mo corregirlos. ¬°Es parte de la aventura de aprender!

    .. image:: img/blink_error.gif

* Acerca de las Funciones

    Imagina estas funciones como hechizos m√°gicos. Cada hechizo tiene un efecto espec√≠fico en nuestra aventura con Arduino:

    * ``pinMode()``: Este hechizo decide si un pin es una ENTRADA o una SALIDA. Es como decidir si un personaje de nuestra historia habla (SALIDA) o escucha (ENTRADA).
    * ``digitalWrite()``: Este hechizo puede hacer que un pin est√© en ALTO (encendido) o en BAJO (apagado), como encender y apagar una luz m√°gica.
    * ``delay()``: Este hechizo hace que el Arduino se detenga por un tiempo determinado, como tomar una breve siesta en medio de nuestra historia.

    Al igual que un libro de hechizos, puedes encontrar todos estos hechizos y muchos m√°s en |link_arduino_web|. ¬°Cuantos m√°s hechizos conozcas, m√°s emocionantes podr√°n ser tus aventuras con Arduino!

* Comentarios: Nuestros Mensajes Secretos

    Tambi√©n tenemos un lenguaje secreto en la programaci√≥n, llamado ``comentarios``. Estos son mensajes que podemos escribir en nuestro c√≥digo usando ``//`` o ``/* */``. ¬øLa parte m√°gica? ¬°El Arduino los ignora por completo! Es un gran lugar para dejar notas para ti mismo o para otros, explicando lo que est√°n haciendo las partes m√°s complicadas del c√≥digo.

* Legibilidad del C√≥digo: Haciendo el C√≥digo Amigable

    Aunque puedes escribir tu c√≥digo de cualquier manera que desees (por ejemplo, colocar punto y coma en una l√≠nea separada no causar√° ning√∫n error), es importante tener en cuenta la legibilidad del c√≥digo.

    .. image:: img/blink_noerror.gif

    Al igual que escribir una buena historia, la forma en que escribimos el c√≥digo puede hacer que sea divertido y f√°cil o aburrido y dif√≠cil de leer. Aqu√≠ hay algunas formas de hacer que tu c√≥digo sea m√°s amigable:

    * Usa una indentaci√≥n adecuada para organizar tus oraciones en p√°rrafos ordenados. Ayuda al lector a entender d√≥nde termina una secci√≥n y comienza otra.
    * Usa nombres de variables que tengan sentido. Es como dar un nombre adecuado a un personaje en una historia.
    * Mant√©n tus funciones peque√±as y simples, como cap√≠tulos cortos y concisos en un libro.
    * Deja comentarios en las partes complicadas. Es como dejar una nota al pie para explicar una palabra dif√≠cil.

Recuerda, no solo estamos codificando para m√°quinas, sino tambi√©n para humanos, ¬°as√≠ que aseg√∫rate de que tu c√≥digo cuente una historia clara y comprensible!



**Reflexiona y Mejora**


Tomarse un momento para reflexionar sobre nuestro viaje puede brindarnos conocimientos que podr√≠amos pasar por alto en el frenes√≠ de la exploraci√≥n. Preg√∫ntate:

* ¬øCu√°l fue la parte m√°s interesante de esta aventura con Arduino?
* ¬øHubo alg√∫n desaf√≠o en el camino? ¬øC√≥mo lo superaste?
* ¬øPodr√≠as explicarle a un amigo qu√© es Arduino, qu√© hace el Arduino IDE o c√≥mo ejecutar un c√≥digo en Arduino?
* ¬øC√≥mo describir√≠as tu primera experiencia programando con Arduino?
* ¬øQu√© m√°s te gustar√≠a aprender sobre Arduino?

Al reflexionar sobre estas preguntas, est√°s profundizando tu comprensi√≥n y prepar√°ndote para futuras exploraciones. Recuerda siempre que no hay una "respuesta incorrecta" en la reflexi√≥n: ¬°es tu viaje personal!
