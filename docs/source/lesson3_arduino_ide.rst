.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

Lektion 3: Einstieg in die Welt von Arduino und Programmierung
==================================================================

In unserer vorherigen Lektion haben wir erfolgreich das Rocker-Bogie-Federungssystem gebaut. 
Um es jedoch funktionsf√§hig zu machen, m√ºssen wir es mit Strom, einem Steuerungsboard und einer Programmierung versorgen, um seine Bewegungen zu steuern.

In dieser Lektion werden wir uns mit dem Steuerungsboard und der Programmierplattform vertraut machen, die wir verwenden werden.

.. image:: img/upload_blink.gif

Kursziele
-------------------------

* Grundkonzepte und Funktionen von Arduino verstehen.
* √úber das SunFounder R3 Board lernen.
* Arduino IDE installieren und sich mit der Benutzeroberfl√§che vertraut machen.
* Grundlegende Syntaxregeln f√ºr die Arduino-Programmierung lernen.



Kursmaterialien
-----------------------

* SunFounder R3 Board
* Arduino IDE
* USB-Kabel
* Computer

Kursschritte
--------------

Einf√ºhrung in Arduino
--------------------------

Du hast den Begriff ‚ÄûArduino‚Äú vielleicht schon oft in verschiedenen Zusammenh√§ngen geh√∂rt, aber was genau ist es und warum ist es so beliebt geworden?

Arduino ist eine benutzerfreundliche Open-Source-Elektronikplattform f√ºr sowohl Hardware- als auch Softwareanwendungen. Sie ist darauf ausgelegt, digitale Ger√§te und interaktive Objekte zu erschaffen, die die physische Welt um sie herum wahrnehmen und steuern k√∂nnen.

Kl√§ren wir das genauer:

* **Open-Source**: Denke an Open-Source wie an einen Gemeinschaftsgarten. Jeder kann ihn nutzen, jeder kann dazu beitragen, und jeder kann davon profitieren. Bei Open-Source werden sowohl die Entw√ºrfe der physischen Teile (die Hardware) als auch die Programmieranweisungen (die Software) frei geteilt. Das bedeutet, dass jeder sie nutzen, verbessern oder eigene Versionen erstellen kann. Es geht um Teilen und Kreativit√§t!

    .. image:: img/arduino_oscomm.png
        :width: 400
        :align: center

* **Mikrocontroller**: Ein Mikrocontroller ist wie das Gehirn des Arduino. Es ist ein kleiner Computer, der einfache Software ausf√ºhren kann. Obwohl er nicht so leistungsf√§hig wie der Computer ist, den du jetzt benutzt, ist er perfekt f√ºr einfache Aufgaben wie das Verstehen von Nachrichten von Sensoren oder das Leuchten einer LED (eine kleine Lampe).

    .. image:: img/arduino_micro.jpg
        :width: 500
        :align: center

* **Entwicklungsboard**: Stell dir das Entwicklungsboard als den K√∂rper vor, der das Gehirn unterst√ºtzt. Es ist das Board, auf dem der Mikrocontroller sitzt und es enth√§lt andere Teile, die dem Mikrocontroller helfen, mit der Welt zu interagieren. Diese Teile umfassen Dinge wie Oszillatoren (die bei der Zeitmessung helfen), Spannungsregler (die die Leistungspegel steuern) und Anschl√ºsse f√ºr Strom und Daten (wie die Stecker und Schalter in deinem Haus).

    .. image:: img/arduino_board.png
        :width: 600
        :align: center

* **Arduino IDE**: Dies ist wie das Klassenzimmer f√ºr deinen Arduino. Es ist ein Programm, das auf deinem Computer l√§uft, wo du die Anweisungen schreiben kannst, die deinem Arduino sagen, was er tun soll. Diese Anweisungen werden in einer auf C++ basierenden Programmiersprache geschrieben. Sobald du deine Anweisungen geschrieben hast, kannst du sie √ºber ein USB-Kabel an das Arduino-Board senden, genau wie wenn du deine Hausaufgaben abgibst!

    .. image:: img/arduino_ide_icon.png
        :width: 200
        :align: center

Jetzt, da du diese grundlegenden Ideen verstanden hast, bist du auf dem besten Weg, ein Arduino-Experte zu werden!

Dann werden wir in einige praktische Aktivit√§ten eintauchen, um dich mit der Arduino-Programmierung und Ingenieursprinzipien vertraut zu machen. 
Bereite dich auf eine spannende Lernreise vor!



Machen Sie sich mit Ihrem SunFounder R3 Board vertraut
-------------------------------------------------------------

In Ihrem Kit finden Sie ein blaues Board, das wie eine kleine Stadt voller kleiner metallischer T√ºrme und Wege erscheint. Aber lassen Sie sich nicht einsch√ºchtern! Dies ist das SunFounder R3 Entwicklungsboard, eine Art Arduino-Board, das verwendet werden kann, um eine Vielzahl von elektronischen Ger√§ten und Projekten zu programmieren und zu steuern.

Lassen Sie uns seine Schl√ºsselfunktionen in einfachen Begriffen verstehen:

.. image:: img/sf_r3.jpg
    :width: 800

* **14 Digital Pins**: Denken Sie an diese Pins wie an kleine Boten. Sie k√∂nnen programmiert werden, um einfache "Ja" oder "Nein" Nachrichten an andere Teile Ihres Mars-Rovers zu senden (Ausgang) oder zu empfangen (Eingang). Diese Nachrichten sind eigentlich "ein" oder "aus" Signale, die das Board verwendet, um Dinge wie Lichter oder Motoren zu steuern.

    * Sechs dieser speziellen Pins k√∂nnen sogar Nachrichten in einer Art Geheimcode namens PWM (Pulse Width Modulation) senden. Dieser Code kann verwendet werden, um zu steuern, wie hell ein Licht ist, wie schnell ein Motor sich dreht oder sogar, wo sich ein bewegliches Teil positioniert.


* **6 Analog Pins**: Diese Pins sind wie die sechs besonderen Sinne des Boards. Sie k√∂nnen Signale von verschiedenen Sensortypen (wie einem Temperatursensor) lesen und diese Signale in eine Sprache √ºbersetzen, die das Board verstehen und in seiner Programmierung verwenden kann.

* **USB Connection**: Dies ist wie die Nabelschnur des Boards. Sie k√∂nnen es verwenden, um Ihr Board mit Ihrem Computer zu verbinden. Diese Verbindung erm√∂glicht es Ihrem Computer, dem Board beizubringen, was es tun soll, indem es ihm ein Programm sendet, das Sie schreiben.

* **Power Jack**: Dies ist die Nahrungsversorgung des Boards. Sie k√∂nnen eine Stromquelle, wie einen Akku oder einen AC/DC-Adapter, an diese Buchse anschlie√üen, um Ihr Board mit dem Strom zu "f√ºttern", den es ben√∂tigt, um zu funktionieren.

* **ICSP Header**: Dies ist wie ein spezieller Eingang zur Programmierung des Boards. Es kann verwendet werden, wenn Sie einen externen Programmierer haben (ein spezielles Ger√§t zum "Unterrichten" des Boards).

* **Reset Button**: Wenn Sie sie dr√ºcken, ist es, als w√ºrden Sie dem Board sagen, dass es vergessen soll, was es gerade getan hat, und sein Programm von vorne beginnen soll.

Mit diesen Grundlagen sind Sie bereit, Ihre Programmierabenteuer mit dem SunFounder R3-Board zu beginnen!

.. _install_arduino_ide:

Installieren Sie Arduino IDE
--------------------------------------

Jetzt, da wir wissen, was Arduino und das Arduino-Board sind, ist es an der Zeit, dieses Wissen in die Praxis umzusetzen. Wir werden die Arduino IDE installieren, die Software, die wir verwenden werden, um unser Arduino-Board zu programmieren.

Die neueste Version der Arduino IDE ist Version 2.0. Sie ist vollgepackt mit Funktionen und sehr benutzerfreundlich. Sie sollten jedoch wissen, dass sie einige Systemanforderungen hat:

    * Windows - Win 10 und neuer, 64 Bit
    * Linux - 64 Bit
    * Mac OS X - Version 10.14: "Mojave" oder neuer, 64 Bit

Um zu beginnen, folgen Sie diesen Schritten:

#. Besuchen Sie |link_download_arduino| und laden Sie die IDE f√ºr Ihre Betriebssystemversion herunter.

    .. image:: img/sp_001.png

**F√ºr Windows-Benutzer:**

    #. Sobald Sie die Datei heruntergeladen haben (sie wird etwas wie ``arduino-ide_xxxx.exe`` hei√üen), doppelklicken Sie darauf, um den Installationsprozess zu starten.

    #. Ihnen wird die **License Agreement** angezeigt. Nehmen Sie sich einen Moment Zeit, diese durchzulesen, und wenn Sie den Bedingungen zustimmen, klicken Sie auf "Ich stimme zu".

        .. image:: img/sp_002.png

    #. Als N√§chstes werden Sie gebeten, Installationsoptionen auszuw√§hlen. Lassen Sie diese so, wie sie sind, und klicken Sie auf ‚ÄûNext‚Äú.

        .. image:: img/sp_003.png

    #. W√§hlen Sie aus, wo Sie die Software installieren m√∂chten. Es ist in der Regel am besten, sie auf einem anderen Laufwerk als dem zu installieren, das Ihr System verwendet.

        .. image:: img/sp_004.png

    #. Klicken Sie auf ‚ÄûInstall‚Äú, um die Installation zu starten. Sobald sie abgeschlossen ist, klicken Sie auf ‚ÄûFinish‚Äú. 

        .. image:: img/sp_005.png

**F√ºr macOS-Benutzer:**

    Doppelklicken Sie auf die heruntergeladene Datei (die etwas wie ``arduino_ide_xxxx.dmg`` hei√üen wird). Befolgen Sie die Anweisungen auf dem Bildschirm, um die **Arduino IDE**-App in den **Applications**-Ordner zu ziehen. Nach einigen Sekunden wird die Arduino IDE erfolgreich installiert sein.

    .. image:: img/macos_install_ide.png
        :width: 800

**F√ºr Linux-Benutzer:**

    Eine detaillierte Anleitung zur Installation der Arduino IDE 2.0 auf einem Linux-System finden Sie hier: |link_arduino_linux|.
    

Entdecken des Arduino-Spielplatzes (IDE)
-------------------------------------------------

Stellen Sie sich vor, die Arduino IDE sei ein magischer Spielplatz voller Werkzeuge und Gadgets, die darauf warten, von uns erkundet und genutzt zu werden. Als N√§chstes werde ich Ihnen helfen, jede Ecke dieses Spielplatzes zu verstehen.


.. image:: img/ide-2-overview.png
    :width: 800

Hier ist, was Sie auf Ihrem Spielplatz finden:

* **Verify / Upload** - Stellen Sie sich das wie Ihren magischen Aufzug vor. Es nimmt den von Ihnen geschriebenen Code und bef√∂rdert ihn auf Ihr Arduino-Board.
* **Select Board & Port** - Das ist Ihre Schatzkarte. Es zeigt automatisch die Arduino-Boards an, die Sie an Ihren Computer angeschlossen haben, und teilt Ihnen deren Portnummer mit.
* **Sketchbook** - Das ist Ihre pers√∂nliche Bibliothek. Hier werden alle Ihre Skizzen (Programme) auf Ihrem Computer gespeichert. Au√üerdem kann es sich mit der Arduino Cloud verbinden, sodass Sie Ihre Skizzen auch aus der Online-Welt abrufen k√∂nnen.
* **Boards Manager** - Denken Sie daran als Ihr Werkzeugkasten. Hier k√∂nnen Sie verschiedene Pakete f√ºr Ihr Arduino finden und installieren.
* **Library Manager** - Das ist Ihre endlose Schatztruhe. Tausende von Bibliotheken, die von Arduino und seiner Community erstellt wurden, warten hier auf Sie. Brauchen Sie ein Werkzeug oder Material f√ºr Ihren Code? Tauchen Sie ein und finden Sie es!
* **Debugger** - Stellen Sie sich vor, Sie h√§tten eine Superkraft, die es Ihnen erm√∂glicht, Ihren Code in Echtzeit zu testen und zu debuggen, um Probleme zu finden und zu beheben. Das ist es, was dies ist!
* **Search** - Denken Sie daran als Ihre Lupe. Es hilft Ihnen, nach Schl√ºsselw√∂rtern in Ihrem Code zu suchen.
* **Open Serial Monitor** - Das ist wie Ihr Kommunikationsger√§t. Es √∂ffnet einen neuen Tab, der es Ihrem Computer und Ihrem Arduino-Board erm√∂glicht, Nachrichten hin und her zu senden.

Jetzt, da wir einen Blick auf den Spielplatz geworfen haben, ist es an der Zeit, einzutauchen und zu beginnen, zu erschaffen!


Laden Sie Ihre erste Skizze hoch
----------------------------------------

In Ordnung, es ist Zeit, etwas Spa√ü zu haben! Wir werden eine LED blinken lassen - es ist wie ein ‚ÄûHello, World!‚Äú in der Welt von Arduino.

Die meisten Arduino-Boards haben eine eingebaute LED am Pin 13, was dies zu einem guten ersten Experiment macht.

.. image:: img/1_led.jpg
    :width: 400
    :align: center

Lassen Sie uns das aufschl√ºsseln:

#. **Einstecken**: Verbinden Sie Ihr SunFounder R3 Board mit einem USB-Kabel mit Ihrem Computer. So geben wir unserem Board Strom und senden unser Programm (auch ‚ÄûSkizze‚Äú genannt) an das Board. Sie f√ºhlen sich vielleicht so, als w√ºrden Sie nur ein Computer-Gadget anschlie√üen, aber glauben Sie mir, Sie verbinden sich mit einer Welt voller M√∂glichkeiten!

    .. image:: img/connect_board_pc.gif

#. **Die Beispiel-Skizze finden**: Gehen Sie in der Arduino IDE zu **File** -> **Examples** -> **Basic** -> **Blink**. Was aufploppt, ist ein fertiges Programm, das wir √§ndern werden. Es ist wie einen fertigen Kuchen zu bekommen, den wir gleich dekorieren werden!

    .. image:: img/open_blink.png

#. **Verstehe den Entwurf**: Schau dir den Code in diesem neuen Fenster an. Er weist Arduino an, die integrierte LED (die sich an Pin 13 befindet) f√ºr eine Sekunde einzuschalten, dann f√ºr eine Sekunde auszuschalten und diesen Vorgang zu wiederholen. Es ist wie Morsecode zu senden, aber mit Licht!

    .. image:: img/led_blink.png

#. **Lade den Entwurf hoch**: Sobald du das richtige Board und den richtigen Port ausgew√§hlt hast, klicke einfach auf den Hochlade-Button. Es ist so einfach wie einen Brief zu senden; du √ºbermittelst deine Anweisungen an das Arduino-Board! Meistens erkennt das System automatisch das Board und den Port f√ºr dich.

    .. image:: img/upload_blink.gif

#. **Beobachte, wie es funktioniert**: Wenn alles gut l√§uft, wirst du sehen, wie die LED auf deinem Arduino-Board anf√§ngt, ein- und auszublinken. Es ist, als w√ºrde dein Arduino dir zuzwinkern!

    .. image:: img/blink_led.gif

Gro√üartige Arbeit! Du hast gerade dein erstes Arduino-Programm ausgef√ºhrt und bist damit ein echter Programmierer! Was kommt als N√§chstes? Wir kratzen gerade erst an der Oberfl√§che dessen, was Arduino leisten kann. Bereit f√ºr die n√§chste Herausforderung?


Einige unterhaltsame Fakten zur Arduino-Programmierung
--------------------------------------------------------------

Zeit, einige coole Geheimnisse √ºber die Arduino-Programmierung zu l√ºften!

* Code-Magie: ``setup()`` und ``loop()``

    Ein Arduino-Entwurf, oder ein St√ºck Code, ist wie ein Theaterst√ºck in zwei Akten:

    * ``setup()``: Das ist Akt 1, die Er√∂ffnungsszene. Sie findet nur einmal statt, wenn dein Arduino-Board zum ersten Mal erwacht. Sie wird verwendet, um die B√ºhne vorzubereiten, indem Dinge wie Pin-Modi und Bibliotheken eingerichtet werden.
    * ``loop()``: Nach Akt 1 gehen wir √ºber zu Akt 2, der sich wiederholt, bis der letzte Vorhang f√§llt (was nur passiert, wenn wir die Stromversorgung abschalten oder den Reset-Knopf dr√ºcken!). Dieser Teil des Codes ist wie der Hauptteil unseres St√ºcks, wo die eigentliche Aktion stattfindet.

    Aber denk daran, selbst wenn es keine Magie (Code) im ``setup()`` oder ``loop()`` gibt, m√ºssen wir sie trotzdem behalten. Sie sind wie die B√ºhne - selbst eine leere B√ºhne bleibt eine B√ºhne.

    .. code-block:: arduino
    
        void setup() {
            // initialize digital pin LED_BUILTIN as an output.
            pinMode(LED_BUILTIN, OUTPUT);

            digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
            delay(1000);                      // wait for a second
            digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
            delay(1000);                      // wait for a second
        }

        // the loop function runs over and over again forever
        void loop() {

        }

* Satzzeichen in der Programmierung

    Genauso wie in einem M√§rchenbuch verwendet Arduino spezielle Satzzeichen, um den Code verst√§ndlich zu machen:

    * ``Semikolons (;)``: Diese sind wie Punkte in einer Geschichte. Sie sagen dem Arduino: "Okay, ich bin fertig mit dieser Aktion. Was kommt als N√§chstes?"
    * ``Geschweifte Klammern {}``: Diese sind wie der Anfang und das Ende eines Kapitels. Sie fassen Code-Teile zusammen und markieren, wo ein Abschnitt beginnt und endet.

    Solltest du einige dieser Satzzeichen vergessen, keine Sorge! Der Arduino ist wie ein freundlicher Lehrer, der deine Arbeit √ºberpr√ºft, dir die Fehler zeigt und dir hilft, sie zu beheben. Das geh√∂rt alles zum Lernabenteuer!

    .. image:: img/blink_error.gif

* √úber die Funktionen

    Stelle dir diese Funktionen wie magische Zauberspr√ºche vor. Jeder Spruch hat eine spezifische Wirkung in unserem Arduino-Abenteuer:

    * ``pinMode()``: Dieser Spruch entscheidet, ob ein Pin ein EINGANG oder ein AUSGANG ist. Es ist, als w√ºrde man entscheiden, ob eine Figur in unserer Geschichte spricht (AUSGANG) oder zuh√∂rt (EINGANG).
    * ``digitalWrite()``: Dieser Spruch kann einen Pin HIGH (an) oder LOW (aus) schalten, wie das Ein- und Ausschalten eines magischen Lichts.
    * ``delay()``: Dieser Spruch l√§sst den Arduino f√ºr eine bestimmte Zeit pausieren, wie eine kurze Pause inmitten unserer Geschichte.
    
    Wie in einem Zauberbuch kannst du all diese und viele weitere Zauberspr√ºche im |link_arduino_web| finden. Je mehr Spr√ºche du kennst, desto aufregender k√∂nnen deine Arduino-Abenteuer werden!

* Kommentare: Unsere Geheimen Nachrichten

    Wir haben auch eine Geheimsprache in der Programmierung, genannt ``Kommentare``. Das sind Nachrichten, die wir in unserem Code mit ``//`` oder ``/* */`` schreiben k√∂nnen. Das Magische daran? Der Arduino ignoriert sie komplett! Es ist ein gro√üartiger Ort, um Notizen f√ºr dich selbst oder andere zu hinterlassen, um zu erkl√§ren, was die schwierigen Teile des Codes tun.

* Lesbarkeit des Codes: Code Benutzerfreundlich Gestalten

    Obwohl du deinen Code schreiben kannst, wie du m√∂chtest (zum Beispiel verursacht das Setzen von Semikolons auf einer separaten Zeile keine Fehler), ist es wichtig, die Lesbarkeit des Codes im Auge zu behalten.

    .. image:: img/blink_noerror.gif

    Wie beim Schreiben einer guten Geschichte kann die Art und Weise, wie wir Code schreiben, diesen entweder spa√üig und leicht oder langweilig und schwer lesbar machen. Hier sind einige M√∂glichkeiten, deinen Code freundlicher zu gestalten:

    * Verwende eine angemessene Einr√ºckung, um deine S√§tze in ordentliche Abs√§tze zu ordnen. Das hilft dem Leser zu verstehen, wo ein Abschnitt endet und ein anderer beginnt.
    * Verwende sinnvolle Variablennamen. Es ist wie, einen Charakter in einer Geschichte mit einem passenden Namen zu nennen.
    * Halte deine Funktionen klein und einfach, wie kurze und s√º√üe Kapitel in einem Buch.
    * Hinterlasse Kommentare f√ºr die kniffligen Teile. Es ist wie, eine Fu√ünote zu hinterlassen, um ein schwieriges Wort zu erkl√§ren.

Denk daran, wir programmieren nicht nur f√ºr Maschinen, sondern auch f√ºr Menschen. Also lass uns daf√ºr sorgen, dass unser Code eine klare und verst√§ndliche Geschichte erz√§hlt!


**Reflektieren und Verbessern**

Einen Moment innezuhalten und √ºber unsere Reise nachzudenken, kann uns Einsichten geben, die wir im Trubel der Entdeckung vielleicht √ºbersehen w√ºrden. Frag dich selbst:

* Was war der interessanteste Teil dieses Arduino-Abenteuers?
* Gab es Herausforderungen auf dem Weg? Wie hast du sie √ºberwunden?
* K√∂nntest du einem Freund erkl√§ren, was Arduino ist, was die Arduino-IDE macht oder wie man Arduino-Code ausf√ºhrt?
* Wie w√ºrdest du deine erste Erfahrung mit der Arduino-Programmierung beschreiben?
* Was m√∂chtest du noch √ºber Arduino lernen?

Indem du √ºber diese Fragen nachdenkst, vertiefst du dein Verst√§ndnis und bereitest dich auf zuk√ºnftige Erkundungen vor. Denk immer daran, es gibt keine ‚Äûfalsche‚Äú Antwort bei der Reflexion ‚Äì es ist schlie√ülich deine pers√∂nliche Reise!
