.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


Le√ßon 7 : Am√©liorer la navigation du Rover avec un module ultrason
========================================================================

Lors de notre derni√®re aventure, nous avons √©quip√© notre Rover martien de "yeux" sur les c√¥t√©s, cr√©ant ainsi un syst√®me basique d'√©vitement d'obstacles. Cependant, il reste un angle mort juste devant ‚Äì un d√©fi que nous sommes pr√™ts √† relever !

Aujourd'hui, dans cette le√ßon, nous allons donner √† notre Rover une nouvelle capacit√© de "vision". Nous allons installer un module de capteur ultrasonique, qui agira comme une paire d'yeux centraux, permettant √† notre Rover de d√©tecter les obstacles directement en face de lui.

Nous explorerons les m√©canismes fascinants des ondes ultrasoniques et d√©couvrirons comment elles am√©liorent la capacit√© de notre Rover √† naviguer sur des terrains complexes. Gr√¢ce √† cette am√©lioration, notre Rover sera plus r√©actif et agile, pr√™t pour des missions exploratoires encore plus ambitieuses.

Rejoignez-nous pour faire un pas de plus dans ce passionnant voyage STEAM, et rendre notre Rover encore plus comp√©tent pour explorer des territoires inconnus !


.. raw:: html

   <video width="600" loop autoplay muted>
      <source src="_static/video/ultrasonic_avoid.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

.. note::

    Si vous suivez ce cours apr√®s avoir enti√®rement assembl√© le GalaxyRVR, vous devez d√©placer cet interrupteur vers la droite avant de t√©l√©verser le code.

    .. image:: img/camera_upload.png
        :width: 500
        :align: center


Objectifs du cours
--------------------------

* Comprendre le principe de la mesure de distance par ultrasons.
* Apprendre √† utiliser Arduino et un module ultrasonique pour mesurer des distances.
* S'exercer √† utiliser le module ultrasonique pour l'√©vitement d'obstacles sur le mod√®le du Rover martien.

Mat√©riel n√©cessaire
-----------------------

* Module ultrasonique
* Outils de base et accessoires (tournevis, vis, fils, etc.)
* Mod√®le du Rover martien (√©quip√© du syst√®me Rocker-Bogie, cartes principales, moteurs, module d'√©vitement d'obstacles)
* C√¢ble USB
* IDE Arduino
* Ordinateur

√âtapes du cours
----------------------
**√âtape 1 : Assembler le module de capteur ultrasonique**

Maintenant que nous sommes pr√™ts √† doter notre Rover martien d'un puissant nouveau sens de "vision", il est temps d'assembler le module de capteur ultrasonique.

.. raw:: html

  <iframe width="600" height="400" src="https://www.youtube.com/embed/c_xWAVapGic?si=ovuxheXdGVpHopPa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Et voil√† ! Notre Rover martien dispose d√©sormais d'un module de capteur ultrasonique enti√®rement assembl√©, pr√™t √† l'aider √† naviguer comme jamais auparavant. √ätes-vous pr√™t √† d√©couvrir comment cela change les capacit√©s de d√©tection d'obstacles de notre Rover ? Plongeons dans l'action !


**√âtape 2 : Explorer le module ultrasonique**

D√©couvrons le HC-SR04, un capteur ultrasonique puissant. Ce petit appareil peut mesurer avec pr√©cision des distances allant de 2 cm √† 400 cm, sans toucher quoi que ce soit ! Incroyable, non ? C'est comme avoir un super-pouvoir ! Il peut "voir" les distances en utilisant simplement des ondes sonores, un peu comme une chauve-souris qui navigue dans l'obscurit√©.

Il utilise quatre super-pouvoirs, ou plut√¥t, quatre broches pour accomplir ses merveilles :

.. image:: img/ultrasonic_pic.png
    :width: 400
    :align: center

* **TRIG (Entr√©e du d√©clencheur)** - C'est le bouton de d√©part de notre super-h√©ros. Il lui dit : "Allez, c'est le moment d'envoyer une onde supersonique !"
* **ECHO (Sortie de l'√©cho)** - C'est ainsi que notre super-h√©ros √©coute l'√©cho de l'onde sonore qu'il a √©mise.
* **VCC** - M√™me les super-h√©ros ont besoin d'√©nergie. Nous le connectons √† une alimentation de 5V.
* **GND** - C'est la connexion √† la terre. Comme les super-h√©ros qui doivent rester ancr√©s √† la r√©alit√© !

Imaginez notre super-h√©ros, le capteur ultrasonique HC-SR04, jouant √† l'√©cho dans les montagnes.

.. image:: img/ultrasonic_prin.jpg
    :width: 800

* D'abord, le cerveau de notre super-h√©ros, le MCU, dit : "Pr√™t, feu, partez !" en envoyant un signal de niveau haut pendant au moins 10 microsecondes √† notre super-h√©ros. C'est comme si nous rassemblions notre √©nergie avant de crier dans une vall√©e.
* En entendant "Partez !", notre super-h√©ros crie 8 fois tr√®s rapidement. Ce cri supersonique est √©mis √† une vitesse de 40 kHz. Le super-h√©ros d√©marre √©galement un chronom√®tre et reste attentif au retour de l'√©cho.
* S'il y a un obstacle devant, le cri rebondit sur celui-ci et revient sous forme d'√©cho. En entendant cet √©cho, notre super-h√©ros arr√™te le chronom√®tre et note le temps. Il envoie √©galement un signal haut pour informer le MCU qu'il a entendu l'√©cho.
* Enfin, pour d√©terminer la distance √† l'obstacle, notre super-h√©ros utilise une formule simple. Il prend le temps enregistr√© sur le chronom√®tre, le divise par 2 et le multiplie par la vitesse du son (340 m/s). Le r√©sultat est la distance √† l'obstacle !

C'est ainsi que notre capteur super-h√©ros peut d√©terminer s'il y a un obstacle sur son chemin et √† quelle distance il se trouve. Impressionnant, non ? Ensuite, nous apprendrons comment utiliser ce super-pouvoir dans notre Rover martien !


**√âtape 3 : Programmer notre capteur super-h√©ros**

Maintenant que nous avons assembl√© notre capteur super-h√©ros et compris comment il utilise ses super-pouvoirs, il est temps de mettre ces pouvoirs en action ! √âcrivons un programme Arduino pour permettre √† notre capteur ultrasonique de mesurer des distances et de nous les montrer.

Voici les √©tapes cl√©s que notre capteur suivra :

* Nous avons connect√© les broches TRIG et ECHO √† la broche 10 du bouclier GalaxyRVR. Cela nous permet de contr√¥ler √† la fois l'√©mission et la r√©ception du module ultrasonique avec une seule broche Arduino.

.. image:: img/ultrasonic_shield.png

.. code-block:: arduino

    // D√©finir la broche pour le module ultrasonique
    #define ULTRASONIC_PIN 10

* **Pr√©paration** : Pour commencer, nous √©tablissons une communication s√©rie √† un d√©bit de 9600 bauds afin de pouvoir voir les mesures de notre super-h√©ros dans le moniteur s√©rie.

.. code-block:: arduino

    void setup() {
        // D√©marrer la communication s√©rie
        Serial.begin(9600);
    }

* **Crier !** : Nous d√©finissons la broche ``ULTRASONIC_PIN`` comme une broche ``OUTPUT`` pour envoyer une impulsion de 10 microsecondes, comme si nous commandions √† notre super-h√©ros d'√©mettre un puissant cri (ondes sonores ultrasoniques) !

.. code-block:: arduino

    // Un d√©lai de 4ms est n√©cessaire, sinon la lecture peut √™tre nulle
    delay(4);

    // R√©gler en OUTPUT pour envoyer le signal
    pinMode(ULTRASONIC_PIN, OUTPUT);

    // Effacer la broche de d√©clenchement
    digitalWrite(ULTRASONIC_PIN, LOW);
    delayMicroseconds(2);

    // D√©clencher le capteur en envoyant une impulsion haute pendant 10¬µs
    digitalWrite(ULTRASONIC_PIN, HIGH);
    delayMicroseconds(10);

    // R√©initialiser la broche de d√©clenchement √† LOW
    digitalWrite(ULTRASONIC_PIN, LOW);

* **Attendre et √©couter** : Nous r√©glons la broche ``ULTRASONIC_PIN`` sur INPUT. Ainsi, notre capteur super-h√©ros est pr√™t √† √©couter l'√©cho de son cri. S'il y a un obstacle devant, le cri rebondit et revient sous forme d'√©cho. En entendant l'√©cho, notre super-h√©ros arr√™te le chronom√®tre et note le temps. Il envoie √©galement un signal haut pour informer le MCU qu'il a entendu l'√©cho.

.. code-block:: arduino

    pinMode(ULTRASONIC_PIN, INPUT);
    float duration = pulseIn(ULTRASONIC_PIN, HIGH);

* **Super calcul** : Avec l'√©cho re√ßu, notre capteur utilise la vitesse du son pour calculer la distance √† l'objet. Nous divisons le temps total de l'√©cho par 2 car ce temps inclut √† la fois le cri et l'attente de l'√©cho.

.. code-block:: arduino

    float distance = duration * 0.034 / 2;

* **Rapporter les r√©sultats** : Notre capteur super-h√©ros r√©v√®le ensuite le r√©sultat de sa mission, en affichant la distance dans le moniteur s√©rie.

.. code-block:: arduino

    // Afficher la distance dans le moniteur s√©rie
    Serial.print("La distance est : ");
    Serial.print(distance);
    Serial.println(" cm");

* **Repos et pr√©paration** : Chaque super-h√©ros a besoin de repos, donc notre capteur prend une courte pause avant la prochaine mission. Cela permet au capteur de se "r√©initialiser" avant de commencer une nouvelle mesure.

.. code-block:: arduino

    delay(200);

Voici le code complet qui transforme notre capteur en super-h√©ros :

.. raw:: html

  <iframe src=https://create.arduino.cc/editor/sunfounder01/35bddbcf-145c-4e4f-b3ea-21e8210af4a6/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

**√âtape 4 : Programmer le module ultrasonique pour diriger le Rover martien**

Maintenant que nous avons √©quip√© notre Rover martien d'un module de capteur ultrasonique, il est temps de le programmer pour r√©agir en fonction des mesures du capteur.

* Pour faciliter la lecture, nous avons cr√©√© une fonction appel√©e ``readSensorData()``. Cette fonction encapsule tout le code n√©cessaire pour lire la distance √† partir du capteur ultrasonique.

  .. code-block:: arduino

    float readSensorData() {
        // Un d√©lai de 4ms est n√©cessaire, sinon la lecture peut √™tre nulle
        delay(4);
      
        // R√©gler en OUTPUT pour envoyer le signal
        pinMode(ULTRASONIC_PIN, OUTPUT);
      
        // Effacer la broche de d√©clenchement
        digitalWrite(ULTRASONIC_PIN, LOW);
        delayMicroseconds(2);
      
        // D√©clencher le capteur en envoyant une impulsion haute pendant 10¬µs
        digitalWrite(ULTRASONIC_PIN, HIGH);
        delayMicroseconds(10);
      
        // R√©initialiser la broche de d√©clenchement √† LOW
        digitalWrite(ULTRASONIC_PIN, LOW);
      
        // R√©gler en INPUT pour lire
        pinMode(ULTRASONIC_PIN, INPUT);
      
        // pulseIn renvoie la dur√©e de l'impulsion sur la broche
        float duration = pulseIn(ULTRASONIC_PIN, HIGH);
      
        // Calculer la distance (en cm) en fonction de la vitesse du son (340 m/s ou 0,034 cm/¬µs)
        float distance = duration * 0.034 / 2;
      
        return distance;
    }

* Dans la fonction ``loop()``, nous appelons ``readSensorData()`` et stockons sa valeur renvoy√©e dans la variable ``distance``.

  .. code-block:: arduino

    float distance = readSensorData();

* En fonction de cette distance, le Rover avancera, reculera ou s'arr√™tera.

  .. code-block:: arduino
  
    // Contr√¥ler le rover en fonction de la lecture de distance
    if (distance > 50) {  // Si c'est sans danger d'avancer
      moveForward(200);
    } else if (distance < 15) {  // S'il y a un obstacle proche
      moveBackward(200);
      delay(500);  // Attendre un moment avant d'essayer de tourner
      backLeft(150);
      delay(1000);
    } else {  // Pour les distances interm√©diaires, avancer prudemment
      moveForward(150);
    }

  * Si la voie est d√©gag√©e (l'obstacle est √† plus de 50 cm), notre Rover avance avec assurance.
  * Et si un obstacle est proche (entre 15 et 50 cm), notre Rover avance √† une vitesse plus faible.
  * Si un obstacle est trop proche (moins de 15 cm), le Rover recule puis tourne √† gauche.

  .. image:: img/ultrasonic_flowchart.png

Voici le code complet. Vous pouvez t√©l√©verser ce code sur la carte R3 et voir s'il atteint l'effet souhait√©. Vous pouvez √©galement modifier la distance de d√©tection en fonction de l'environnement r√©el pour rendre ce syst√®me d'√©vitement d'obstacles encore plus performant.

.. raw:: html

  <iframe src=https://create.arduino.cc/editor/sunfounder01/cded6408-1469-4289-b79b-7d445b56352b/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>



En utilisant ces capacit√©s am√©lior√©es, le Rover martien sera mieux √©quip√© pour identifier les obstacles potentiels sur son chemin, mesurer les distances avec pr√©cision et prendre des d√©cisions √©clair√©es pour les √©viter. Cela r√©duira consid√©rablement les risques de collisions ou d'autres dangers susceptibles de freiner la mission d'exploration du Rover.

Gr√¢ce √† ses super-capteurs, le Rover martien peut op√©rer avec plus de confiance et d'efficacit√©, lui permettant d'explorer en profondeur les myst√®res de Mars et de recueillir des donn√©es scientifiques pr√©cieuses pour les chercheurs sur Terre.


**√âtape 5 : R√©sum√© et r√©flexion**

Dans cette le√ßon, nous avons explor√© le fonctionnement des ondes ultrasoniques et comment traduire leur temps de retour en une distance mesurable gr√¢ce √† la programmation.

Ensuite, nous avons utilis√© ces ondes ultrasoniques pour concevoir un syst√®me d'√©vitement d'obstacles. Ce syst√®me particulier ajuste ses r√©ponses en fonction de la distance par rapport √† l'obstacle imminent.

R√©fl√©chissons √† cette le√ßon avec quelques questions :

* Comment un module ultrasonique d√©tecte-t-il la distance ? Pouvez-vous expliquer le concept sous-jacent ?
* En quoi le syst√®me d'√©vitement d'obstacles de cette le√ßon diff√®re-t-il de celui de la le√ßon pr√©c√©dente ? Quels sont leurs avantages et inconv√©nients respectifs ?
* Est-il possible de combiner ces deux syst√®mes d'√©vitement d'obstacles ?

R√©pondre √† ces questions nous aidera √† renforcer notre compr√©hension et √† envisager l'application de ces concepts √† d'autres projets. √Ä bient√¥t pour notre prochaine aventure !
