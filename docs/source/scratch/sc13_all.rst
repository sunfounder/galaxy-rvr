.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Le√ßon 13 Contr√¥le en Temps R√©el
=======================================

Nous avons maintenant explor√© la plupart des fonctionnalit√©s du GalaxyRVR. 
Pour compl√©ter notre voyage et transformer le GalaxyRVR en un robot pleinement fonctionnel, 
nous devons combiner les trois parties principales que nous avons abord√©es.

    * :ref:`camera_system` : Cette partie comprend les fonctionnalit√©s de contr√¥le de la cam√©ra et de la LED.

    * :ref:`rgb_move` : Cette section inclut les mouvements et les effets d'√©clairage.

    * :ref:`tilt_system` : Cette partie concerne le r√©glage de la direction du gimbal de la cam√©ra.

Assemblez le tout et vous pourrez cliquer sur les sprites pour allumer ou √©teindre la cam√©ra et la LED, et utiliser les touches fl√©ch√©es pour d√©placer le GalaxyRVR.

.. image:: img/13_camera_go_all2.png

**Syst√®me de Cam√©ra**
------------------------------------

Pour cette partie, r√©p√©tez les √©tapes de :ref:`camera_system`.

1. Cr√©ez quatre nouveaux sprites pour contr√¥ler la cam√©ra et sa LED. Ajustez leur taille pour qu'ils soient harmonieux.

.. image:: img/11_camera_4.png
.. :align: center

2. Programmez chaque sprite : cliquer sur la balle 1 √©teindra la cam√©ra.

.. image:: img/11_camera_1sp.png
.. :align: center

3. Cliquer sur la balle 2 allumera la cam√©ra et r√©glera l'orientation de l'image.

.. image:: img/11_camera_2sp.png
.. :align: center

4. Cliquer sur le ballon 3 allumera la LED.

.. image:: img/11_camera_3sp.png
.. :align: center

5. Cliquer sur le ballon 4 √©teindra la LED.

.. image:: img/11_camera_4sp.png
.. :align: center

6. Pour gagner de l'espace sur la sc√®ne, superposez chaque ensemble de contr√¥les.

.. image:: img/11_camera_fold.png
.. :align: center

7. Ajoutez un bloc ``aller √† l'arri√®re-plan`` pour chaque sprite. Lorsqu'on clique dessus, le sprite se d√©placera vers l'arri√®re-plan, r√©v√©lant le sprite suivant, cr√©ant ainsi un effet de bascule.

.. image:: img/11_camera_layer.png
.. :align: center

**Syst√®me de Mouvement & RGB**
----------------------------------



Am√©liorons les fonctionnalit√©s de mouvement. Nous les avons d√©j√† programm√©es dans la section :ref:`rgb_move`.

Nous recommandons de placer ces blocs de code dans les Arri√®re-plans. De cette fa√ßon, la modification du code du sprite n'affectera pas cette fonctionnalit√©.

.. image:: img/13.ccc_code_in_stage.png

1. Configurez le GalaxyRVR pour allumer la lumi√®re verte lorsqu'il avance.

.. image:: img/13.ccc_light_forward.png

2. Configurez le GalaxyRVR pour allumer la lumi√®re rouge lorsqu'il recule.

.. image:: img/13.ccc_light_left_right.png

3. Configurez le GalaxyRVR pour allumer la lumi√®re jaune lorsqu'il tourne √† gauche ou √† droite.

.. image:: img/13.ccc_light_backfwd.png

4. Configurez le GalaxyRVR pour allumer la lumi√®re respirante lorsqu'il est immobile.

.. image:: img/13.ccc_light_breath.png

Enfin, votre code devrait √™tre comme suit. 
Veuillez noter que ces codes doivent √™tre √©crits dans les Arri√®re-plans.

.. image:: img/11_camera_backdrops.png

**Syst√®me d'Inclinaison**
----------------------------

Cette partie est identique √† :ref:`tilt_system`. Il suffit de r√©p√©ter les √©tapes.

1. Ajoutez un sprite en forme de fl√®che. Nous r√©glerons la direction du gimbal en fonction de son orientation.

.. image:: img/10_servo_arrow.png

2. Un bloc ``quand ce sprite cliqu√©`` est exactement ce dont nous avons besoin.

.. image:: img/6_animate_when_touch.png
    :width: 230

3. Faites en sorte que le programme se r√©p√®te jusqu'√† ce que nous rel√¢chions le sprite, c'est-√†-dire que nous ne touchions plus le sprite.

.. image:: img/6_animate_repeat_touching.png
    :width: 550

4. Faites glisser un bloc ``pointer vers position_toucher`` pour faire en sorte que le sprite fasse face √† la position de touche.

.. image:: img/10_servo_arrow_point_toward.png

5. Faites glisser un bloc ``r√©glage angle servo √† 90 degr√©s`` et int√©grez un bloc ``direction`` pour aligner l'angle du gimbal avec l'orientation du sprite fl√®che. Ainsi, lorsque nous changeons la direction du sprite fl√®che (c'est-√†-dire en touchant la zone de la sc√®ne), nous pouvons modifier l'angle du gimbal.

.. image:: img/10_servo_arrow_angle_direction.png

6. Ajoutez une v√©rification de limite pour garantir que l'orientation du sprite fl√®che ne d√©passe pas 135 degr√©s.

.. image:: img/10_servo_arrow_135.png

7. De m√™me, assurez-vous que son orientation ne tombe pas en dessous de 0 degr√©s.

.. image:: img/10_servo_arrow_0.png

Touchez le sprite, et il changera de direction au fur et √† mesure que vous faites glisser, modifiant ainsi l'angle du gimbal.

Si vous trouvez qu'il est facile de faire glisser votre doigt hors du sprite fl√®che, vous pouvez augmenter la taille du sprite en cons√©quence.
