.. _ir_obstacle:

第六课 红外避障模块
===========================

我们将深入了解红外避障模块。在我们的火星车两侧，这些传感器就像火星车的“眼睛”，帮助它避开侧面障碍物，安全地穿越火星地貌。

我们将学习如何将这些模块集成到火星车中，解密它们的工作原理，并编写代码让火星车智能地避开它遇到的障碍物。

准备好为火星车添加一些避障智慧了吗？让我们开始吧！

.. raw:: html

   <video width="600" loop autoplay muted>
      <source src="../_static/video/car_ir1.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

学习目标
-------------------------

* 了解红外避障模块的工作原理及其在火星车中的应用。
* 学会在 Scratch 中读取和应用红外避障模块的数据。
* 使用红外模块和 Scratch 舞台，创建一个火星探索主题的避障游戏。


所需材料
-----------

* 智能手机或平板电脑
* Mammoth Coding 应用
* GalaxyRVR

解密模块
-------------------------------------

认识一下红外避障模块——我们的火星车智能助手。这小小的设备充满了惊喜，让我们一起了解一下：

.. image:: ../img/ir_avoid.png
    :width: 300
    :align: center

下面是各个引脚的定义：

* **GND**：这是模块的地线，将其与电路中的公共点连接。
* **+**：模块的电源输入端，需要3.3V至5V的直流电压。
* **Out**：这是模块的输出端。默认情况下，输出高电平，只有在检测到障碍物时才会变为低电平。
* **EN**：这是模块的启用引脚，控制模块的工作状态。默认情况下，EN 引脚连接到 GND，意味着模块始终处于开启状态。


想知道这个小模块如何工作的？它使用了一对红外组件——一个发射器和一个接收器。
发射器就像模块的手电筒，发出红外光。当有障碍物出现时，红外光会反射回来并被接收器接收到。
模块随后输出低电平信号，提醒我们的火星车有障碍物。

.. image:: ../img/ir_receive.png
    :align: center

这个小小的模块非常耐用，能够在2至40厘米的范围内检测障碍物，并且具有出色的抗干扰能力。
然而，物体的颜色会影响其检测效果。较深色的物体，尤其是黑色物体，会在较短的距离内被检测到。
白色墙壁上的感应效果最佳，通常可以在2至30厘米的范围内进行有效检测。

**EN** 引脚的低电平状态激活模块，跳线帽将 **EN** 引脚连接到 GND。如果你想通过代码控制 **EN** 引脚，需要移除跳线帽。

.. image:: ../img/ir_cap.png
    :width: 400
    :align: center

模块上有两个电位器，一个用于调整发射功率，另一个用于调整发射频率。通过调整这两个电位器，你可以调整其有效检测距离。

.. image:: ../img/ir_avoid_pot.png
    :width: 400
    :align: center

到目前为止，我们已经了解了不少关于这个小模块的信息。在接下来的步骤中，我们将学习如何将它与火星车集成，并使用 Arduino 来控制它。敬请期待！



红外避障模块检测值
------------------------------------------------------------

1. 打开 GalaxyRVR。

.. raw:: html

   <br></br>

2. 进入一个关键步骤，那就是根据当前环境调整传感器的检测距离。出厂设置可能并不理想。如果两个红外模块的检测距离太短，火星车可能会碰到障碍物；如果距离过远，火星车可能在距离障碍物较远的情况下就开始转向，影响其正常运动。

    调整方法如下：

    a. 先调整右侧避障模块。在运输过程中，碰撞可能导致红外模块的发射器和接收器发生倾斜。因此，你需要手动将其调整到正确位置。

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="../_static/video/ir_adjust1.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>

    b. 在右侧模块前约20厘米处放置一个障碍物。我们火星车套件的盒子就非常合适！然后，调整模块上的电位器，直到模块指示灯刚好亮起。接着，继续前后移动障碍物，检查指示灯是否在所需距离内点亮。如果灯不亮或始终亮着，你需要调整另一个电位器。

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="../_static/video/ir_adjust2.mp4" type="video/mp4">
                你的浏览器不支持视频标签。
            </video>

    c. 对另一个模块重复相同的过程。

3. 我们来看看这两个信号的情况。首先，参考： :ref:`app_connect`。

.. raw:: html

   <br></br>

4. 在 GalaxyRVR 类别中，找到左侧红外状态和右侧红外状态模块。这些模块存储红外模块的检测结果。确保勾选这些框。

    .. image:: img/4_ir_statusblock.png

5. 现在，这些值会显示在舞台上。

    .. image:: img/4_ir_statusvalue.png

6. 将手靠近红外避障模块，触发检测并观察舞台上的值变化。

如果红外模块检测到障碍物，值会变为 True；如果没有障碍物，值会是 False。



响应红外避障模块
-------------------------------------------------------------

我们可以利用红外避障模块让 GalaxyRVR 自动避开两侧的障碍物。

1. 拖入一个绿色旗帜模块。

.. image:: img/4_ir_start.png

2. 设置速度。这里我们将速度设置为30%，这样不会太快，便于调试。

.. image:: img/4_ir_speed.png

3. 找到 ``when left IR is blocked`` 模块。

.. image:: img/4_ir_when_blocked.png

4. 当左侧检测到障碍物时，GalaxyRVR 应该向右转。

.. image:: img/4_ir_turn_right.png

5. 一直向右转，直到左侧不再检测到障碍物。

.. image:: img/4_ir_wait_until.png

6. 停止移动。

.. image:: img/4_ir_stop.png

7. 当你组装好这些模块后，试着用手触发左侧红外避障模块。GalaxyRVR 会智能地向右转来避开你的手。

.. raw:: html

   <br></br>

8. 长按这些模块，弹出菜单后可以复制代码。

.. image:: img/4_ir_duplicate.png

9. 在复制的代码中，交换左右两侧。

.. image:: img/4_ir_left_right.png

10. 如果两个红外事件同时触发，你会发现行为可能会变得不稳定。为避免这种情况，“停止其他脚本”模块会非常有用。它可以确保每次只有一个传感器事件被响应。

.. image:: img/4_ir_stop_script.png

.. note:: 停止脚本模块与包含时间参数的模块（例如：前进1秒）可能会发生冲突，因此尽量避免同时使用。


11. 现在，当检测到任一侧的障碍物时，GalaxyRVR 会向左或向右转。你可以测试通过用手触发两个传感器，看看 GalaxyRVR 如何向左和向右躲避。

.. raw:: html

   <br></br>

12. 在每个代码块下添加一个前进模块，这样 GalaxyRVR 在避开障碍物后会继续前进。

.. image:: img/4_ir_avoid_move.png

现在，点击绿色旗帜，GalaxyRVR 会持续向前移动，转弯避开障碍物后继续前进。



与红外模块相关的模块
----------------------------------------

.. image:: img/block/ir_when.png

这是一个事件模块，当左侧红外传感器检测到障碍物时触发。你可以：

    * 在下拉菜单中将“left”改为“right”

.. image:: img/block/ir_wait_until.png

此模块会暂停程序，直到左侧红外传感器不再检测到障碍物，然后继续。你可以：

    * 在第一个下拉菜单中将“left”改为“right”
    * 在第二个下拉菜单中将“is not”改为“is”，以便在相反条件下操作

.. image:: img/block/ir_condition.png

这是一个条件模块，当左侧红外传感器检测到障碍物时返回 TRUE，否则返回 FALSE。通常用于需要条件判断的模块中，例如 ``if``。你可以：

    * 在下拉菜单中将“left”改为“right”

.. image:: img/block/ir_left_value.png

此模块显示左侧红外传感器当前是否检测到障碍物。

.. image:: img/block/ir_right_value.png

此模块显示右侧红外传感器当前是否检测到障碍物。
