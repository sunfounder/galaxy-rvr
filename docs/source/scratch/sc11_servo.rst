第十一课 舵机与倾斜机制
===============================================================

欢迎回来，年轻的探险者们！在今天的冒险中，我们将深入了解火星车的视觉系统。就像我们的眼睛和脖子一起帮助我们看清周围的环境并进行导航一样，我们的火星车也需要一个类似的系统来应对险恶的火星地形。而这正是我们今天要构建的内容！

火星车的视觉系统主要有两个部分：一个作为“眼睛”的摄像头和一个作为“脖子”的倾斜机制，后者能让摄像头上下移动。通过本课的学习，我们将使火星车具备“看”和“点头”的能力！

首先，我们将构建倾斜机制——一个支撑火星车摄像头的装置，让它能够上下旋转。就像给火星车装上脖子，让它能像人类一样点头！  

接下来，我们将了解舵机，这个微小但强大的“肌肉”，它将控制倾斜机制的运动。我们将学习它的工作原理，并通过 Arduino 编程来控制它。

就像我们的脖部肌肉帮助头部转动，让眼睛看到更好的视野一样，舵机将推动倾斜机制，让火星车的摄像头更好地观察火星地形。

所以，系好安全带，探险者们，准备好开始我们的任务，给火星车配备它自己的视觉系统吧！

.. raw:: html

    <video width="600" loop autoplay muted>
        <source src="../_static/video/servo_range.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>



学习目标
-------------------------

* 介绍舵机的工作原理及其在机械控制中的应用。
* 学习如何使用 Mammoth Coding 设置舵机角度，实现精确控制。
* 设计在 Mammoth Coding 平台上的互动项目，通过舵机实现物理交互。


所需材料
--------------------

* 智能手机或平板电脑
* Mammoth Coding 应用
* GalaxyRVR

舵机是什么？
----------------------------------------

你是否曾看过木偶剧？如果看过，你一定会惊叹木偶师如何通过拉动几根线，就能让木偶的手臂、腿和头部如此流畅地动起来。某种程度上，舵机就像是我们的木偶师。

.. image:: ../img/puppet_show.png
    :width: 200
    :align: center

舵机是一种特殊的电机，它并不像普通电机那样只会旋转。相反，它可以移动到一个特定的位置，并保持在那个位置。想象一下你正在玩“西蒙说”游戏，当西蒙说：“把手臂抬到 90 度角！”你能做到，对吗？这就像舵机一样，你可以精确控制手臂的运动。

.. image:: ../img/servo.png
    :align: center

* 棕色线：GND
* 橙色线：信号引脚，连接到主板的 PWM 引脚。
* 红色线：VCC


就像你可以控制手臂的移动一样，我们也可以使用舵机控制项目中物体的精确位置。在我们的火星车中，我们将使用舵机控制倾斜机制的上下运动，就像你能让头部上下点头一样。

接下来的步骤中，我们将深入了解舵机内部，看看它是如何工作的。准备好了吗？我们出发！

舵机如何工作？
-------------------------------------------

那么，舵机是如何发挥它的魔力的呢？让我们一起进入舵机的内部，去探索它的奥秘吧！

如果我们从舵机的内部窥视，就会看到几个主要部件。在舵机的核心是一个普通的电机，类似于驱动火星车轮子的电机。电机外面包裹着一个大齿轮，这个大齿轮与电机轴上的一个小齿轮相连。这种结构将电机快速的圆周运动转化为较慢但更强劲的运动。

.. image:: ../img/servo_internal.png
    :align: center

但这并不是舵机特别之处。舵机的魔力来源于一个小小的电子元件——“电位器”和“控制电路”。它是如何工作的呢？当舵机运动时，电位器会转动并改变其电阻值。控制电路会测量这个电阻的变化，从而精确知道舵机的当前角度。聪明吧？

为了控制舵机，我们向它发送一种特殊的信号，叫做“脉宽调制”信号（PWM）。通过改变这些脉冲的宽度，我们可以精确控制舵机的角度，并让它保持在那个位置。

接下来的步骤中，我们将学习如何使用 APP 来控制舵机。准备好用代码施展魔法了吗？我们出发！



探索火星车的倾斜系统
-------------------------------------------------

**设置云台角度**

1. 检查舵机的角度，你可以看到舞台上显示的当前角度。

.. image:: img/10_servo_angle.png

2. 拖出一个“设置舵机角度为 90 度”块。点击它，你会看到 GalaxyRVR 面向前方。

.. image:: img/10_servo_set_angle.png

3. 将角度改为 45 度，再点击，你会看到 GalaxyRVR 向上看。

.. image:: img/10_servo_set_angle_45.png

4. 通过多次实验，你会发现 GalaxyRVR 的云台可以在 0 到 135 度之间移动。随着角度的增加，云台会降低。


**改变云台角度**

1. GalaxyRVR 的舵机云台系统是一个精巧的单自由度结构，因此你只需要控制它的“复位”，“向上”和“向下”功能。

.. raw:: html

   <br></br>

2. 现在让我们创建一个复位按钮。拖出一个 ``当这个精灵被点击`` 块。

.. image:: img/10_servo_when_click.png

3. 插入一个 ``设置舵机角度为 90 度`` 块，让云台正对前方。

.. image:: img/10_servo_when_90.png

4. 拖出一个 ``当上箭头键被按下`` 块。

.. image:: img/10_servo_when_up.png

5. 当按下上箭头时，减少舵机角度。

.. image:: img/10_servo_when_up2.png

6. 同样，添加一个下箭头键事件，使云台向下看。

.. image:: img/10_servo_when_down.png

现在，点击全屏按钮放大舞台区域，点击上箭头和下箭头来调整云台角度，点击精灵来复位角度。

.. _tilt_system:

触摸舞台区域来调整云台角度
-----------------------------------------------------------

接下来，我们将使用箭头精灵来实现更加流畅的舵机角度调整。

当我们触摸箭头时，可以拖动箭头精灵的方向。

1. 删除原来的精灵。

.. image:: img/6_animate_delete.png

2. 添加一个箭头精灵。我们将根据箭头的方向来设置云台的角度。

.. image:: img/10_servo_arrow.png

3. 我们需要的正是一个 ``当这个精灵被点击`` 块。

.. image:: img/6_animate_when_touch.png
    :width: 230

4. 让程序在触摸精灵时重复执行，直到我们松开它，表示不再触摸该精灵。

.. image:: img/6_animate_repeat_touching.png
    :width: 550

3. 拖出一个 ``指向触摸位置`` 块，使精灵指向触摸位置。

.. image:: img/10_servo_arrow_point_toward.png

4. 拖出一个 ``设置舵机角度为 90 度`` 块，并嵌入一个 ``方向`` 块，使云台角度与箭头精灵的方向对齐。这样，当我们改变箭头精灵的方向（即触摸舞台区域）时，就可以改变云台角度。

.. image:: img/10_servo_arrow_angle_direction.png

5. 添加限制检查，确保箭头精灵的方向不超过 135 度。

.. image:: img/10_servo_arrow_135.png

6. 同样，确保其方向不低于 0 度。

.. image:: img/10_servo_arrow_0.png


触摸精灵时，它将随着拖动改变方向，进而改变云台角度。

如果你觉得很容易滑动手指脱离箭头精灵，可以适当增大精灵的尺寸。


舵机相关的代码块
-------------------------------

.. image:: img/block/servo_set_angle.png

此块用于设置舵机角度，范围是 0 到 180 度（但由于结构限制，实际可用的范围是 0 到 135 度）。

.. image:: img/block/servo_increase_angle.png

此块用于增加（或减少）舵机角度，数值可以为负数。

.. image:: img/block/servo_value.png

显示舵机的当前角度。
