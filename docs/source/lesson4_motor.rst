.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Profundiza en el mundo de Raspberry Pi, Arduino y ESP32 con otros apasionados.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones exclusivas**: Obt√©n acceso anticipado a los anuncios de nuevos productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!


Lecci√≥n 4: Dominando el Motor TT
=====================================

En las lecciones anteriores, exploramos los rovers de Marte, sus sistemas de suspensi√≥n y profundizamos en el conocimiento sobre Arduino.

En este emocionante curso, exploraremos el funcionamiento de los motores, un componente clave que impulsa los rovers marcianos.
Entenderemos los principios que alimentan estos motores y aprenderemos a controlarlos utilizando la placa SunFounder R3 y el Shield GalaxyRVR.

Al final de este curso, tendr√°s una comprensi√≥n s√≥lida del funcionamiento de los motores y experiencia pr√°ctica en su control.

¬°Vamos a sumergirnos!

.. raw:: html

    <video width="600" loop autoplay muted>
        <source src="_static/video/left_1.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

.. note::

    Si est√°s aprendiendo este curso despu√©s de haber ensamblado completamente el GalaxyRVR, debes mover este interruptor hacia la derecha antes de cargar el c√≥digo.

    .. image:: img/camera_upload.png
        :width: 500
        :align: center

Objetivos del Curso
--------------------------
* Comprender los principios b√°sicos de los motores y las caracter√≠sticas del motor TT.
* Aprender a controlar la direcci√≥n y la velocidad del motor TT.
* Entender c√≥mo el Shield GalaxyRVR controla seis motores.


Materiales del Curso
-----------------------

* Placa SunFounder R3
* Motor TT
* Shield GalaxyRVR
* Bater√≠a
* Cable USB
* Arduino IDE
* Computadora

Pasos del Curso
------------------

**Paso 1: ¬øQu√© es un motor?**

Los motores juegan un papel fundamental en nuestras vidas diarias. ¬°Est√°n por todas partes! Desde los ventiladores el√©ctricos que nos refrescan en los d√≠as calurosos, los batidores que nos ayudan a hacer deliciosos pasteles, hasta los coches el√©ctricos que recorren las calles: ¬°los motores hacen que las cosas se muevan!

.. image:: img/motor_application.jpg

Un motor es como el coraz√≥n de una m√°quina. Convierte la energ√≠a el√©ctrica en energ√≠a mec√°nica, dando vida a nuestros juguetes, electrodom√©sticos e incluso a grandes veh√≠culos.

El "truco" detr√°s de un motor no es magia, es ciencia, espec√≠ficamente el principio de la inducci√≥n electromagn√©tica. As√≠ es como funciona: cuando se suministra electricidad a un motor, se genera un campo magn√©tico. Este campo magn√©tico interact√∫a con otros imanes dentro del motor, lo que provoca que el motor gire. Este giro, como el giro de un trompo, se puede utilizar para mover ruedas, h√©lices u otras partes m√≥viles de una m√°quina.

.. image:: img/motor_rotate.gif
    :align: center

El tipo de motor en el que nos enfocamos en nuestro GalaxyRVR es un motor con engranajes espec√≠fico llamado Motor TT.

.. image:: img/tt_motor_xh.jpg
    :align: center
    :width: 400

Este es esencialmente un motor regular combinado con una serie de engranajes, todos encerrados en una carcasa de pl√°stico.

A medida que el motor gira, los engranajes transforman este giro en movimiento para las ruedas de nuestro rover. El uso de engranajes proporciona un beneficio crucial: aumenta el torque, lo que permite que el motor mueva cargas m√°s grandes y pesadas.

.. image:: img/motor_internal.gif
    :align: center
    :width: 600

¬øNo es fascinante ver c√≥mo los principios de la ciencia y la ingenier√≠a cobran vida? Los motores son un ejemplo perfecto de estos principios en acci√≥n. Al entender c√≥mo funcionan los motores, podemos imaginar e inventar una amplia gama de m√°quinas. ¬°Vamos a profundizar en el mundo de los motores y liberar nuestra creatividad!


**Paso 2: Explorando el Funcionamiento y Operaci√≥n del Motor**

Habiendo comprendido qu√© es un motor y su amplio espectro de aplicaciones, es hora de adentrarnos en el funcionamiento interno de un motor.

Esencialmente, un motor funciona bajo el principio del electromagnetismo. Cuando una corriente el√©ctrica pasa a trav√©s de un cable, genera un campo magn√©tico a su alrededor. Este campo magn√©tico puede interactuar con otros campos magn√©ticos, causando movimiento.

Considera un experimento simple donde conectamos un motor directamente a una bater√≠a. La corriente de la bater√≠a fluye hacia el motor, activando el mecanismo interno del motor y haciendo que comience a girar. Esta acci√≥n de giro se debe a las fuerzas magn√©ticas dentro del motor.

    .. image:: img/motor_battery.png

Curiosamente, si inviertes las conexiones a la bater√≠a, el motor gira en la direcci√≥n opuesta. Esto sucede porque la direcci√≥n del flujo de corriente cambia, alterando el sentido del campo magn√©tico y, en consecuencia, la direcci√≥n del giro del motor.

Ahora sabemos que conectar el motor directamente a una bater√≠a puede hacerlo girar, pero a menudo queremos controlar su movimiento con c√≥digo, por lo que incluimos una placa Arduino entre ambos. Pero, ¬øqu√© suceder√≠a si intent√°ramos conectar el motor directamente a los pines de se√±al en la placa Arduino?

.. image:: img/motor_uno.png
    :width: 600
    :align: center

Si adivinaste que el motor no girar√≠a, ¬°tienes raz√≥n! ¬øPero por qu√©?

La respuesta radica en la salida de corriente de la placa Arduino. Los pines de se√±al de una placa Arduino t√≠pica solo pueden emitir alrededor de 20mA de corriente, lo cual es insuficiente para impulsar un motor.

Entonces, ¬øc√≥mo podemos controlar motores utilizando nuestro Arduino? Aqu√≠ es donde entra en juego un componente crucial: un controlador de motor. Piensa en un controlador de motor como un puente entre el Arduino y el motor. Toma la se√±al de control de baja corriente del Arduino, la amplifica y la env√≠a al motor, lo que permite que gire.

.. image:: img/motor_uno2.png

En nuestro pr√≥ximo paso, profundizaremos en los detalles del controlador de motor y entenderemos c√≥mo podemos usarlo eficazmente con nuestra placa Arduino para controlar un motor. ¬°Mantente atento para m√°s aprendizaje emocionante!


**Paso 3: C√≥mo el motor es controlado por el controlador de motor**

El Shield GalaxyRVR, incluido en el kit, sirve como el centro de control para nuestro Rover Marciano. Es el centro donde conectamos todos nuestros sensores, motores y la fuente de alimentaci√≥n. Consiste en varios componentes que nos permiten controlar y alimentar nuestro Rover de manera efectiva.

En el lado derecho del shield, notar√°s seis puertos para motores. Sin embargo, est√°n agrupados en dos conjuntos, cada uno controlado por un chip controlador de motor separado. Tres puertos marcados como "Izquierda" son controlados por un chip, y los otros tres puertos marcados como "Derecha" son controlados por otro.

.. image:: img/motor_shield.png

Aprendamos c√≥mo estos dos chips controladores manejan los seis motores a trav√©s de una experiencia pr√°ctica:

* **1. Conectando el circuito**

    #. Conecta el Shield GalaxyRVR a la placa R3, conecta un motor, y finalmente conecta la bater√≠a para alimentar la placa de expansi√≥n.

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/connect_shield.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>

    #. La primera vez que lo uses, se recomienda que conectes un cable USB Tipo-C para cargar completamente la bater√≠a primero. Luego enciende la alimentaci√≥n.
    
        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/plug_usbc.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>

* **2. Escribir y cargar el c√≥digo**

    #. Abre el Arduino IDE e ingresa el siguiente c√≥digo:

        .. code-block:: arduino

            void setup() {
                pinMode(2, OUTPUT);
                pinMode(3, OUTPUT);
            }

            void loop() {
                digitalWrite(2, LOW);
                digitalWrite(3, HIGH);
            }
    
        * ``pinMode()``: Esta funci√≥n configura un pin como INPUT o OUTPUT, similar a decidir si un personaje en nuestra historia habla (OUTPUT) o escucha (INPUT).
        * ``digitalWrite()``: Esta funci√≥n puede establecer un pin en HIGH (encendido) o LOW (apagado), como encender o apagar una luz m√°gica.

    #. Una vez que hayas seleccionado la placa correcta (Arduino Uno) y el puerto, haz clic en el bot√≥n **Upload**. Es como poner una carta en el buz√≥n: ¬°est√°s enviando tus instrucciones al Arduino!

        .. image:: img/motor_upload.png
        
    #. Una vez que el c√≥digo se haya cargado correctamente, ver√°s que el motor comienza a girar en sentido horario.

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/left_1.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>
    
* **3. Sobre la conexi√≥n interna del circuito**

    #. Puedes conectar otros dos motores en los puertos marcados como "Izquierda". Ver√°s que giran simult√°neamente.

    #. Ahora, entendamos el principio simple de c√≥mo los dos chips controladores manejan los seis motores. Los pines 2 y 3 en la placa Arduino env√≠an se√±ales al chip controlador del motor, y el otro extremo del chip est√° conectado a tres motores en paralelo. De manera similar, los pines 4 y 5 env√≠an se√±ales a otro chip controlador, que a su vez est√° conectado a otros tres motores en paralelo.

        .. image:: img/motor_driver.png
            :width: 500

    #. Si deseas probar el otro chip controlador, solo necesitas cambiar los pines a ``4`` y ``5``.

        .. code-block:: arduino
            :emphasize-lines: 10,11

            const int in3 = 4;
            const int in4 = 5;

            void setup() {
                pinMode(in3, OUTPUT);
                pinMode(in4, OUTPUT);
            }

            void loop() {
                digitalWrite(in3, LOW);
                digitalWrite(in4, HIGH);
            }

        Aqu√≠, definimos dos variables para representar los pines 4 y 5. Al usar variables, podemos gestionar y ajustar f√°cilmente las asignaciones de pines en todo nuestro c√≥digo.

        Piensa en ello como si estuvi√©ramos asignando un rol espec√≠fico a cada n√∫mero de pin. Cuando decidimos reasignar los roles, en lugar de cambiar cada instancia en todo el script, solo actualizamos la asignaci√≥n al principio del script (donde se define la variable inicialmente).


* **4. Sobre la l√≥gica de control**

    #. En las pruebas anteriores, habr√°s notado que los motores giran en una direcci√≥n. ¬øC√≥mo hacemos que giren en la direcci√≥n opuesta? Alguien podr√≠a sugerir intercambiar el HIGH y LOW de los dos pines. Eso es correcto.

        .. code-block:: arduino
            :emphasize-lines: 1,2

            const int in3 = 4;
            const int in4 = 5;

            void setup() {
                pinMode(in3, OUTPUT);
                pinMode(in4, OUTPUT);
            }

            void loop() {
                digitalWrite(in3, HIGH);
                digitalWrite(in4, LOW);
            }

        Una vez que hayas escrito tu c√≥digo y lo hayas cargado en tu placa Arduino, el motor se comportar√° seg√∫n las instrucciones.

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/right_cc.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>

#. Ahora, echemos un vistazo a la l√≥gica de control interna del chip controlador.

    .. list-table::
        :widths: 25 25 50
        :header-rows: 1

        * - INA
          - INB
          - Motor
        * - L
          - L
          - En espera
        * - L
          - H
          - Sentido horario
        * - H
          - L
          - Sentido antihorario
        * - H
          - H
          - Freno

#. Ahora, intentemos hacer que el motor gire en sentido horario durante 2 segundos, en sentido antihorario durante 2 segundos y luego se detenga.

    .. code-block:: arduino
        :emphasize-lines: 10,11,12,13,14,15,16,17,18

        const int in3 = 4;
        const int in4 = 5;
        
        void setup() {
            pinMode(in3, OUTPUT);
            pinMode(in4, OUTPUT);
        }
        
        void loop() {
            digitalWrite(in3, LOW);
            digitalWrite(in4, HIGH);
            delay(2000);
            digitalWrite(in3, HIGH);
            digitalWrite(in4, LOW);
            delay(2000);
            digitalWrite(in3, HIGH);
            digitalWrite(in4, HIGH);
            delay(5000);
        }

    * Aqu√≠ utilizamos la funci√≥n ``delay()`` para hacer que Arduino haga una pausa por un tiempo determinado, como si tomara una breve siesta en medio de nuestra historia.
    * En el c√≥digo, usamos el estado de "Freno" para detener el motor, y notar√°s que el motor se detiene abruptamente. Prueba estableciendo ambos pines en LOW para probar el estado de "En espera", y ver√°s que el motor se desacelera gradualmente hasta detenerse.

Ahora deber√≠as tener una mejor comprensi√≥n de c√≥mo el chip controlador de motores controla los motores a trav√©s del Shield GalaxyRVR y c√≥mo podemos usar el c√≥digo Arduino para manipular los movimientos del motor. ¬øNo es fascinante c√≥mo unas pocas l√≠neas de c√≥digo pueden dictar el comportamiento de un objeto f√≠sico como nuestro motor?

Considera las siguientes preguntas a medida que avanzas:

* Si movemos todo el c√≥digo desde la funci√≥n ``loop()`` a la funci√≥n ``setup()``, ¬øc√≥mo cambiar√≠a el comportamiento del motor?
* ¬øC√≥mo modificar√≠as el c√≥digo para controlar seis motores simult√°neamente?

Recuerda, cuanto m√°s experimentes y juegues con tu c√≥digo, m√°s aprender√°s. Si√©ntete libre de ajustar, modificar y optimizar tu c√≥digo seg√∫n lo consideres necesario. ¬°Feliz programaci√≥n!


**Paso 4: Control de la velocidad del motor**

En el paso anterior, controlamos la direcci√≥n del motor simplemente estableciendo sus pines en HIGH o LOW. 
Esto es como darle al motor toda la potencia para que funcione, similar a presionar el pedal del acelerador a fondo en un coche. 
Pero en muchas situaciones, es posible que queramos ajustar la velocidad del motor para adaptarla a diferentes escenarios, 
tal como ajustamos la velocidad de un coche dependiendo de si estamos conduciendo en una ciudad o en una autopista. 
Aqu√≠ es donde entra en juego la Modulaci√≥n por Ancho de Pulso (PWM).

.. image:: img/motor_pwm.jpg

PWM es una t√©cnica que se utiliza para crear el efecto de salida de voltaje variable al cambiar r√°pidamente la salida entre HIGH y LOW. 
Con PWM, podemos simular el efecto de una se√±al anal√≥gica mientras en realidad solo enviamos se√±ales digitales.

Puede que esto te resulte dif√≠cil de entender, ¬°y est√° bien! Aprenderemos c√≥mo ajustar la velocidad del motor utilizando PWM mediante programaci√≥n en las siguientes secciones.

Ten en cuenta que aunque la placa SunFounder R3 tiene algunos pines con funcionalidad PWM integrada, no podemos utilizarlos para nuestro motor porque ya est√°n cumpliendo otras funciones. Por lo tanto, conectamos los chips controladores a los pines 2, 3, 4 y 5, y utilizamos la biblioteca SoftPWM de Arduino para habilitar PWM en estos pines.

Esto es lo que haremos a continuaci√≥n:

#. Abre Arduino IDE, busca ``softpwm`` en el **ADMINISTRADOR DE BIBLIOTECAS** e inst√°lala.

    .. raw:: html

        <video width="600" loop autoplay muted>
            <source src="_static/video/install_softpwm.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>

#. Ingresa el siguiente c√≥digo en Arduino IDE. Despu√©s de cargar el c√≥digo con √©xito, el motor girar√° en sentido horario.

    .. code-block:: arduino
        :emphasize-lines: 1, 7,11,12

        #include <SoftPWM.h>

        const int in1 = 2;
        const int in2 = 3;

        void setup() {
            SoftPWMBegin();
        }

        void loop() {
            SoftPWMSet(in1, 0);
            SoftPWMSet(in2, 255);

        }

    * En el c√≥digo anterior, primero a√±adimos ``SoftPWM.h`` en la parte superior del c√≥digo, lo que nos permite usar directamente las funciones de la biblioteca ``SoftPWM``.
    * Luego, inicializamos la biblioteca ``SoftPWM`` con la funci√≥n ``SoftPWMBegin()``.
    * Finalmente, en la funci√≥n ``loop()``, usamos ``SoftPWMSet()`` para asignar diferentes valores a ``in1`` e ``in2``, poniendo en marcha el motor. Notar√°s que el efecto es similar a usar directamente ``LOW`` y ``HIGH``, pero aqu√≠ utilizamos valores num√©ricos dentro de un rango de ``0~255``.
    * Recuerda, en el mundo de Arduino, la velocidad se expresa como un valor entre 0 (como un coche en una se√±al de stop) y 255 (a toda velocidad en la autopista). As√≠ que cuando decimos ``SoftPWMSet(in2, 255)``, ¬°estamos dici√©ndole al motor que avance a toda velocidad!

#. Ahora, ingresemos otros valores y observemos las diferencias en la velocidad del motor.

    .. code-block:: arduino
        :emphasize-lines: 12,13,14,15

        #include <SoftPWM.h>

        const int in1 = 2;
        const int in2 = 3;

        void setup() {
            SoftPWMBegin();
        }

        void loop() {
            SoftPWMSet(in1, 0);
            for (int i = 0; i <= 255; i++) {
                SoftPWMSet(in2, i);
                delay(100);
        }
            delay(1000);
        }

    En el c√≥digo anterior, utilizamos un bucle ``for`` para incrementar una variable ``i`` hasta ``255``. El bucle ``for`` en el lenguaje C se usa para iterar sobre una parte del programa varias veces. Consiste en tres partes:

    .. image:: img/motor_for123.png
        :width: 400
        :align: center

    * **Inicializaci√≥n**: Este paso se ejecuta primero y solo una vez cuando ingresamos al bucle por primera vez. Nos permite declarar e inicializar cualquier variable de control del bucle.
    * **Condici√≥n**: Este es el siguiente paso despu√©s de la inicializaci√≥n. Si es verdadera, se ejecuta el cuerpo del bucle. Si es falsa, el cuerpo del bucle no se ejecuta y el flujo de control sale del bucle.
    * **Incremento o Decremento**: Despu√©s de ejecutar los pasos de Inicializaci√≥n y Condici√≥n, y el c√≥digo del cuerpo del bucle, se ejecuta el paso de Incremento o Decremento. Esta declaraci√≥n nos permite actualizar cualquier variable de control del bucle.

    El diagrama de flujo para el bucle ``for`` se muestra a continuaci√≥n:

    .. image:: img/motor_for.png

    As√≠ que, despu√©s de ejecutar el c√≥digo anterior, ver√°s que la velocidad del motor aumenta gradualmente. Se detiene durante un segundo, y luego comienza nuevamente desde 0 y aumenta gradualmente.

    .. raw:: html

        <video width="600" loop autoplay muted>
            <source src="_static/video/left_speed.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>

En este paso, hemos aprendido sobre la Modulaci√≥n por Ancho de Pulso (PWM), una t√©cnica para controlar la velocidad de nuestro motor. Al usar la biblioteca SoftPWM de Arduino, podemos ajustar la velocidad del motor, lo que nos permite simular se√±ales anal√≥gicas mientras solo enviamos se√±ales digitales. Esto nos proporciona un mayor control sobre los movimientos de nuestro rover y nos prepara para maniobras m√°s complejas en el futuro.

**Paso 5: Reflexiona y mejora**

Habiendo completado esta lecci√≥n, ahora deber√≠as estar familiarizado con los principios de funcionamiento de los motores, as√≠ como con c√≥mo controlar su direcci√≥n y velocidad mediante programaci√≥n.

Pongamos a prueba tu comprensi√≥n con estos desaf√≠os:

* ¬øC√≥mo modificar√≠as el bucle ``for`` para reducir gradualmente la velocidad del motor?
* ¬øC√≥mo controlar√≠as el motor para acelerar o desacelerar mientras gira en sentido antihorario?

Puedes experimentar con el c√≥digo proporcionado para responder a estas preguntas. Si√©ntete libre de ajustar el c√≥digo seg√∫n tus hip√≥tesis y observar los cambios en el comportamiento del motor.

Tus experimentos pr√°cticos y reflexiones sobre estas preguntas profundizar√°n tu comprensi√≥n y mejorar√°n tus habilidades para resolver problemas. Es a trav√©s de desaf√≠os como estos que se produce el verdadero aprendizaje. Recuerda siempre, no hay "correcto" o "incorrecto" en tu viaje exploratorio, ¬°todo se trata de aprender y descubrir!

