.. note::

    Bonjour, et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Soyez parmi les premiers √† d√©couvrir les nouvelles annonces de produits et obtenez des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


Le√ßon 4 : Ma√Ætriser le Moteur TT
====================================

Dans les le√ßons pr√©c√©dentes, nous avons explor√© les rovers martiens, leurs syst√®mes de suspension, et nous avons d√©couvert Arduino.

Dans ce cours passionnant, nous allons explorer le fonctionnement des moteurs, un composant cl√© qui fait avancer les rovers martiens.
Nous comprendrons les principes qui alimentent ces moteurs et apprendrons √† les contr√¥ler en utilisant la carte SunFounder R3 et un GalaxyRVR Shield.

√Ä la fin de ce cours, vous aurez une solide compr√©hension du fonctionnement des moteurs et une exp√©rience pratique du contr√¥le des moteurs.

Allons-y !

.. raw:: html

    <video width="600" loop autoplay muted>
        <source src="_static/video/left_1.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

.. note::

    Si vous suivez ce cours apr√®s avoir enti√®rement assembl√© le GalaxyRVR, vous devez d√©placer cet interrupteur vers la droite avant de t√©l√©charger le code.

    .. image:: img/camera_upload.png
        :width: 500
        :align: center

Objectifs du cours
----------------------
* Comprendre les principes de base des moteurs et les caract√©ristiques du moteur TT.
* Apprendre √† contr√¥ler la direction et la vitesse du moteur TT.
* Comprendre comment le Shield GalaxyRVR contr√¥le six moteurs.


Mat√©riel du cours
-----------------------

* Carte SunFounder R3
* Moteur TT
* Shield GalaxyRVR
* Batterie
* C√¢ble USB
* IDE Arduino
* Ordinateur

√âtapes du cours
------------------

**√âtape 1 : Qu'est-ce qu'un moteur ?**

Les moteurs jouent un r√¥le essentiel dans notre vie quotidienne. Ils sont partout ! Des ventilateurs √©lectriques qui nous rafra√Æchissent lors des journ√©es chaudes, aux mixeurs qui nous aident √† pr√©parer de d√©licieux g√¢teaux, en passant par les voitures √©lectriques qui filent dans les rues ‚Äì les moteurs mettent les choses en mouvement !

.. image:: img/motor_application.jpg

Un moteur est comme le c≈ìur d'une machine. Il convertit l'√©nergie √©lectrique en √©nergie m√©canique, donnant vie √† nos jouets, appareils √©lectrom√©nagers, et m√™me aux grands v√©hicules !

La magie derri√®re un moteur n'est pas de la magie, mais bien de la science, plus pr√©cis√©ment le principe de l'induction √©lectromagn√©tique. Voici comment cela fonctionne : lorsque de l'√©lectricit√© est fournie √† un moteur, elle g√©n√®re un champ magn√©tique. Ce champ magn√©tique interagit ensuite avec d'autres aimants √† l'int√©rieur du moteur, provoquant la rotation du moteur. Cette rotation, comme faire tourner une toupie, peut ensuite √™tre utilis√©e pour faire bouger des roues, des h√©lices ou d'autres pi√®ces mobiles d'une machine.

.. image:: img/motor_rotate.gif
    :align: center

Le type de moteur sur lequel nous nous concentrons dans notre GalaxyRVR est un mod√®le sp√©cifique appel√© moteur √† engrenage TT.

.. image:: img/tt_motor_xh.jpg
    :align: center
    :width: 400

Il s'agit essentiellement d'un moteur classique combin√© √† une s√©rie d'engrenages, le tout enferm√© dans un bo√Ætier en plastique.

Lorsque le moteur tourne, les engrenages traduisent cette rotation en mouvement pour les roues de notre rover. L'utilisation des engrenages apporte un avantage crucial : elle augmente le couple, permettant au moteur de d√©placer des charges plus lourdes.

.. image:: img/motor_internal.gif
    :align: center
    :width: 600

N'est-ce pas fascinant de voir comment les principes scientifiques et d'ing√©nierie prennent vie ? Les moteurs sont un parfait exemple de ces principes en action. En comprenant leur fonctionnement, nous pouvons imaginer et inventer une grande vari√©t√© de machines. Plongeons plus profond√©ment dans le monde des moteurs et lib√©rons notre cr√©ativit√© !


**√âtape 2 : Explorer le Fonctionnement et l'Op√©ration du Moteur**

Maintenant que nous avons compris ce qu'est un moteur et ses diverses applications, il est temps de plonger au c≈ìur de son fonctionnement.

En essence, un moteur fonctionne sur le principe de l'√©lectromagn√©tisme. Lorsqu'un courant √©lectrique traverse un fil, il g√©n√®re un champ magn√©tique autour de lui. Ce champ magn√©tique peut interagir avec d'autres champs magn√©tiques, provoquant un mouvement.

Prenons un exemple simple o√π nous connectons un moteur directement √† une batterie. Le courant de la batterie entre dans le moteur, d√©clenchant son m√©canisme interne pour commencer √† tourner. Cette action de rotation est due aux forces magn√©tiques √† l'int√©rieur du moteur.

    .. image:: img/motor_battery.png

Fait int√©ressant, si vous inversez les connexions √† la batterie, le moteur tournera dans le sens inverse ! Cela se produit parce que la direction du flux de courant change, modifiant ainsi la direction du champ magn√©tique et, par cons√©quent, celle de la rotation du moteur.

Nous savons maintenant que connecter un moteur directement √† une batterie peut le faire tourner, mais souvent nous voulons contr√¥ler son mouvement avec du code, c'est pourquoi nous incluons une carte Arduino entre les deux. Mais que se passerait-il si nous essayions de connecter le moteur directement aux broches de signal de la carte Arduino ?

.. image:: img/motor_uno.png
    :width: 600
    :align: center

Si vous avez devin√© que le moteur ne tournerait pas, vous avez raison ! Mais pourquoi ?

La r√©ponse r√©side dans la sortie de courant de la carte Arduino. Les broches de signal d'une carte Arduino typique ne peuvent fournir qu'environ 20 mA de courant, ce qui est insuffisant pour faire tourner un moteur.

Alors, comment pouvons-nous contr√¥ler les moteurs avec notre Arduino ? C'est l√† qu'intervient un composant crucial : le driver de moteur. Pensez au driver de moteur comme √† un pont entre l'Arduino et le moteur. Il prend le signal de contr√¥le √† faible courant de l'Arduino, l'amplifie et l'envoie au moteur, permettant ainsi au moteur de tourner.

.. image:: img/motor_uno2.png

Dans notre prochaine √©tape, nous approfondirons les sp√©cificit√©s du driver de moteur et comprendrons comment l'utiliser efficacement avec notre carte Arduino pour contr√¥ler un moteur. Restez √† l'√©coute pour plus d'apprentissages passionnants !


**√âtape 3 : Comment le Moteur est Contr√¥l√© par le Driver de Moteur**

Notre Shield GalaxyRVR, inclus dans le kit, sert de centre de contr√¥le pour notre Rover martien. C'est le hub o√π nous connectons tous nos capteurs, moteurs et source d'alimentation. Il se compose de plusieurs composants qui nous permettent de contr√¥ler et d'alimenter efficacement notre Rover.

Sur le c√¥t√© droit du Shield, vous remarquerez six ports pour les moteurs. Cependant, ils sont regroup√©s en deux ensembles, chacun contr√¥l√© par une puce de driver de moteur s√©par√©e. Trois ports marqu√©s "Left" sont contr√¥l√©s par une puce, et les trois autres ports marqu√©s "Right" sont contr√¥l√©s par une autre puce.

.. image:: img/motor_shield.png

Apprenons comment ces deux puces de driver contr√¥lent les six moteurs √† travers une exp√©rience pratique :

* **1. Connexion du Circuit**

    #. Branchez le Shield GalaxyRVR sur la carte R3, connectez un moteur, et enfin branchez la batterie pour alimenter la carte d'expansion.

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/connect_shield.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>

    #. La premi√®re fois que vous l'utilisez, il est recommand√© de brancher un c√¢ble USB Type-C pour charger compl√®tement la batterie. Ensuite, allumez l'alimentation.
    
        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/plug_usbc.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>

* **2. √âcriture et T√©l√©chargement du Code**

    #. Ouvrez l'IDE Arduino et entrez le code suivant :

        .. code-block:: arduino

            void setup() {
                pinMode(2, OUTPUT);
                pinMode(3, OUTPUT);
            }

            void loop() {
                digitalWrite(2, LOW);
                digitalWrite(3, HIGH);
            }
    
        * ``pinMode()`` : Cette fonction d√©finit une broche en tant qu'ENTR√âE ou SORTIE, comme si l'on d√©cidait si un personnage dans notre histoire parle (SORTIE) ou √©coute (ENTR√âE).
        * ``digitalWrite()`` : Cette fonction permet de mettre une broche en HIGH (activ√©e) ou en LOW (d√©sactiv√©e), un peu comme allumer ou √©teindre une lumi√®re magique.

    #. Une fois que vous avez s√©lectionn√© la bonne carte (Arduino Uno) et le bon port, cliquez sur le bouton **T√©l√©verser**. C'est comme poster une lettre ‚Äì vous envoyez vos instructions √† l'Arduino !

        .. image:: img/motor_upload.png
        
    #. Une fois le code t√©l√©vers√© avec succ√®s, vous verrez le moteur commencer √† tourner dans le sens des aiguilles d'une montre.

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/left_1.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>
    
* **3. √Ä propos de la Connexion Interne du Circuit**

    #. Vous pouvez brancher deux autres moteurs dans les ports marqu√©s "Left". Vous les verrez tourner simultan√©ment.

    #. Comprenons maintenant le principe simple de la mani√®re dont les deux puces de commande de moteur contr√¥lent les six moteurs. Les broches 2 et 3 sur la carte Arduino envoient des signaux √† la puce de commande du moteur, et l'autre extr√©mit√© de la puce est connect√©e √† trois moteurs en parall√®le. De m√™me, les broches 4 et 5 envoient des signaux √† une autre puce de commande, qui est elle-m√™me connect√©e √† trois autres moteurs en parall√®le.

        .. image:: img/motor_driver.png
            :width: 500

    #. Si vous souhaitez tester une autre puce de commande, vous devez simplement changer les broches en ``4`` et ``5``.

        .. code-block:: arduino
            :emphasize-lines: 10,11

            const int in3 = 4;
            const int in4 = 5;

            void setup() {
                pinMode(in3, OUTPUT);
                pinMode(in4, OUTPUT);
            }

            void loop() {
                digitalWrite(in3, LOW);
                digitalWrite(in4, HIGH);
            }

        Ici, nous d√©finissons deux variables pour repr√©senter les broches 4 et 5. En utilisant des variables, nous pouvons facilement g√©rer et ajuster nos attributions de broches dans tout le code.

        C'est un peu comme si nous assignions un r√¥le sp√©cifique √† chaque num√©ro de broche. Si nous d√©cidons de r√©assigner ces r√¥les, au lieu de modifier chaque occurrence dans le script, il suffit de mettre √† jour l'assignation au d√©but du script (l√† o√π la variable est initialement d√©finie).


* **4. √Ä propos de la Logique de Commande**

    #. Lors des tests pr√©c√©dents, vous avez probablement remarqu√© que les moteurs tournent tous dans une direction. Comment les faire tourner dans l'autre sens ? Quelqu'un pourrait sugg√©rer d'inverser les √©tats HIGH et LOW des deux broches. C'est exact.

        .. code-block:: arduino
            :emphasize-lines: 1,2

            const int in3 = 4;
            const int in4 = 5;

            void setup() {
                pinMode(in3, OUTPUT);
                pinMode(in4, OUTPUT);
            }

            void loop() {
                digitalWrite(in3, HIGH);
                digitalWrite(in4, LOW);
            }

        Une fois que vous avez √©crit votre code et l'avez t√©l√©vers√© sur votre carte Arduino, le moteur se comportera comme pr√©vu.

        .. raw:: html

            <video width="600" loop autoplay muted>
                <source src="_static/video/right_cc.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>

    #. Examinons maintenant la logique interne de commande de la puce de commande de moteur.

        .. list-table::
            :widths: 25 25 50
            :header-rows: 1

            * - INA
              - INB
              - Moteur
            * - L
              - L
              - Veille
            * - L
              - H
              - Sens horaire
            * - H
              - L
              - Sens antihoraire
            * - H
              - H
              - Frein
    
    #. Maintenant, essayons de faire tourner le moteur dans le sens horaire pendant 2 secondes, puis dans le sens antihoraire pendant 2 secondes, et enfin l'arr√™ter.

        .. code-block:: arduino
            :emphasize-lines: 10,11,12,13,14,15,16,17,18

            const int in3 = 4;
            const int in4 = 5;
            
            void setup() {
                pinMode(in3, OUTPUT);
                pinMode(in4, OUTPUT);
            }
            
            void loop() {
                digitalWrite(in3, LOW);
                digitalWrite(in4, HIGH);
                delay(2000);
                digitalWrite(in3, HIGH);
                digitalWrite(in4, LOW);
                delay(2000);
                digitalWrite(in3, HIGH);
                digitalWrite(in4, HIGH);
                delay(5000);
            }

        * Ici, nous utilisons la fonction ``delay()`` pour faire faire une pause √† l'Arduino pendant un certain temps, comme prendre une petite pause dans notre histoire.
        * Dans le code, nous utilisons l'√©tat "Frein" pour arr√™ter le moteur, et vous remarquerez que le moteur s'arr√™te brusquement. Essayez de r√©gler les deux broches sur LOW pour tester l'√©tat "Veille", et vous constaterez que le moteur ralentit progressivement jusqu'√† s'arr√™ter.

Vous devriez maintenant avoir une meilleure compr√©hension de la mani√®re dont la puce de commande de moteur contr√¥le les moteurs via le Shield GalaxyRVR et comment nous pouvons utiliser le code Arduino pour manipuler les mouvements du moteur. N'est-ce pas fascinant de voir comment quelques lignes de code peuvent dicter le comportement d'un objet physique comme notre moteur ?

R√©fl√©chissez aux questions suivantes en avan√ßant :

* Si nous d√©pla√ßons tout le code de la fonction ``loop()`` vers la fonction ``setup()``, comment le comportement du moteur changerait-il ?
* Comment modifieriez-vous le code pour contr√¥ler six moteurs simultan√©ment ?

Souvenez-vous, plus vous exp√©rimentez et jouez avec votre code, plus vous apprenez. N'h√©sitez pas √† ajuster, modifier et optimiser votre code √† votre guise. Bon codage !

**√âtape 4 : Contr√¥ler la Vitesse du Moteur**

Dans l'√©tape pr√©c√©dente, nous avons contr√¥l√© la direction du moteur en d√©finissant simplement ses broches sur HIGH ou LOW. 
C'est un peu comme donner toute la puissance au moteur, √† l'image d'appuyer √† fond sur l'acc√©l√©rateur d'une voiture. 
Cependant, dans de nombreuses situations, nous souhaitons ajuster la vitesse du moteur pour s'adapter √† diff√©rents sc√©narios, 
tout comme nous ajustons la vitesse d'une voiture en fonction de si nous roulons en ville ou sur l'autoroute. 
C'est ici qu'intervient la modulation de largeur d'impulsion (PWM, Pulse Width Modulation).

.. image:: img/motor_pwm.jpg

Le PWM est une technique utilis√©e pour cr√©er un effet de sortie de tension variable en basculant rapidement la sortie entre HIGH et LOW. 
Avec le PWM, nous pouvons simuler l'effet d'un signal analogique tout en ne g√©n√©rant que des signaux num√©riques.

Cela peut sembler difficile √† comprendre, et c'est normal ! Nous allons apprendre √† ajuster la vitesse du moteur √† l'aide du PWM dans les sections suivantes √† travers la programmation.

Notez que m√™me si la carte SunFounder R3 dispose de certaines broches avec la fonctionnalit√© PWM int√©gr√©e, nous ne pouvons pas les utiliser pour notre moteur car elles remplissent d√©j√† d'autres fonctions. Ainsi, nous connectons les puces de commande aux broches 2, 3, 4 et 5, et utilisons la biblioth√®que SoftPWM d'Arduino pour activer le PWM sur ces broches.

Voici ce que nous allons faire ensuite :

#. Ouvrez l'IDE Arduino, recherchez ``softpwm`` dans le **GESTIONNAIRE DE BIBLIOTH√àQUES** et installez-la.

    .. raw:: html

        <video width="600" loop autoplay muted>
            <source src="_static/video/install_softpwm.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>

#. Entrez le code suivant dans l'IDE Arduino. Apr√®s avoir t√©l√©vers√© le code avec succ√®s, le moteur tournera dans le sens des aiguilles d'une montre.

    .. code-block:: arduino
        :emphasize-lines: 1, 7,11,12

        #include <SoftPWM.h>

        const int in1 = 2;
        const int in2 = 3;

        void setup() {
            SoftPWMBegin();
        }

        void loop() {
            SoftPWMSet(in1, 0);
            SoftPWMSet(in2, 255);

        }

    * Dans le code ci-dessus, nous commen√ßons par ajouter ``SoftPWM.h`` en haut du code, ce qui nous permet d'utiliser directement les fonctions de la biblioth√®que ``SoftPWM``.
    * Ensuite, nous initialisons la biblioth√®que ``SoftPWM`` avec la fonction ``SoftPWMBegin()``.
    * Enfin, dans la fonction ``loop()``, nous utilisons ``SoftPWMSet()`` pour assigner des valeurs diff√©rentes √† ``in1`` et ``in2``, mettant ainsi le moteur en mouvement. Vous remarquerez que l'effet est similaire √† l'utilisation directe de ``LOW`` et ``HIGH``, mais ici, nous utilisons des valeurs num√©riques comprises entre ``0 et 255``.
    * Rappelez-vous, dans le monde d'Arduino, la vitesse est exprim√©e par une valeur entre 0 (comme une voiture √† un feu rouge) et 255 (comme une voiture √† pleine vitesse sur l'autoroute). Donc, quand nous disons ``SoftPWMSet(in2, 255)``, cela signifie que le moteur doit aller √† pleine vitesse !

#. Maintenant, entrons d'autres valeurs et observons les diff√©rences dans la vitesse du moteur.

    .. code-block:: arduino
        :emphasize-lines: 12,13,14,15

        #include <SoftPWM.h>

        const int in1 = 2;
        const int in2 = 3;

        void setup() {
            SoftPWMBegin();
        }

        void loop() {
            SoftPWMSet(in1, 0);
            for (int i = 0; i <= 255; i++) {
                SoftPWMSet(in2, i);
                delay(100);
        }
            delay(1000);
        }
    
    Dans le code ci-dessus, nous utilisons une boucle ``for`` pour incr√©menter une variable ``i`` jusqu'√† ``255``. La boucle ``for`` en langage C est utilis√©e pour r√©p√©ter une partie du programme plusieurs fois. Elle est constitu√©e de trois parties :

    .. image:: img/motor_for123.png
        :width: 400
        :align: center

    * **Initialisation** : Cette √©tape est ex√©cut√©e en premier et une seule fois lorsque nous entrons dans la boucle pour la premi√®re fois. Elle nous permet de d√©clarer et d'initialiser toutes les variables de contr√¥le de la boucle.
    * **Condition** : C'est l'√©tape suivante apr√®s l'initialisation. Si elle est vraie, le corps de la boucle est ex√©cut√©. Si elle est fausse, le corps de la boucle n'est pas ex√©cut√© et le flux de contr√¥le sort de la boucle ``for``.
    * **Incr√©ment ou D√©cr√©ment** : Apr√®s l'ex√©cution des √©tapes d'Initialisation et de Condition et du code du corps de la boucle, l'√©tape d'Incr√©ment ou D√©cr√©ment est ex√©cut√©e. Cette instruction nous permet de mettre √† jour toutes les variables de contr√¥le de la boucle.

    Le diagramme de flux pour la boucle ``for`` est illustr√© ci-dessous :

    .. image:: img/motor_for.png

    Apr√®s avoir ex√©cut√© le code ci-dessus, vous verrez la vitesse du moteur augmenter progressivement. Il s'arr√™te pendant une seconde, puis recommence √† partir de 0 et augmente progressivement.

    .. raw:: html

        <video width="600" loop autoplay muted>
            <source src="_static/video/left_speed.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>

Dans cette √©tape, nous avons appris la modulation de largeur d'impulsion (PWM), une technique permettant de contr√¥ler la vitesse de notre moteur. En utilisant la biblioth√®que SoftPWM d'Arduino, nous pouvons ajuster la vitesse du moteur, ce qui nous permet de simuler des signaux analogiques tout en g√©n√©rant uniquement des signaux num√©riques. Cela nous offre un contr√¥le plus pr√©cis sur les mouvements de notre rover et nous pr√©pare √† des man≈ìuvres plus complexes √† l'avenir.

**√âtape 5 : R√©fl√©chir et S'am√©liorer**

Apr√®s avoir compl√©t√© cette le√ßon, vous devriez d√©sormais √™tre familiaris√© avec les principes de fonctionnement des moteurs, ainsi que la mani√®re de contr√¥ler leur direction et leur vitesse par la programmation.

Testons votre compr√©hension avec ces d√©fis :

* Comment modifieriez-vous la boucle ``for`` pour diminuer progressivement la vitesse du moteur ?
* Comment contr√¥leriez-vous le moteur pour qu'il acc√©l√®re ou d√©c√©l√®re tout en tournant dans le sens inverse des aiguilles d'une montre ?

Vous pouvez exp√©rimenter avec le code fourni pour r√©pondre √† ces questions. N'h√©sitez pas √† ajuster le code selon vos hypoth√®ses et √† observer les changements dans le comportement du moteur.

Vos exp√©riences pratiques et vos r√©flexions sur ces questions approfondiront votre compr√©hension et am√©lioreront vos comp√©tences en r√©solution de probl√®mes. C'est √† travers ces d√©fis que l'apprentissage r√©el se produit. N'oubliez jamais qu'il n'y a pas de "bonne" ou de "mauvaise" r√©ponse dans votre voyage d'exploration ‚Äì tout est question d'apprentissage et de d√©couverte !

