.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Soyez parmi les premiers √† d√©couvrir les nouvelles annonces de produits et obtenez des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Le√ßon 5 : D√©velopper la Mobilit√© du Rover Martien
======================================================

Pr√©parez-vous, jeunes explorateurs ! Nous avons ma√Ætris√© le contr√¥le des moteurs, et maintenant, nous allons appliquer ces comp√©tences sur la plan√®te rouge. Dans cette le√ßon, nous allons donner vie √† notre rover martien !

Nous apprendrons √† assembler les moteurs dans le syst√®me de suspension Rocker-Bogie et, gr√¢ce √† nos comp√©tences en codage, nous guiderons notre rover √† travers des paysages martiens imaginaires.

C'est une aventure martienne en classe. Allons-y !

.. raw:: html

   <video width="600" loop autoplay muted>
      <source src="_static/video/car_move.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

.. note::

    Si vous suivez ce cours apr√®s avoir enti√®rement assembl√© le GalaxyRVR, vous devez d√©placer cet interrupteur vers la droite avant de t√©l√©charger le code.

    .. image:: img/camera_upload.png
        :width: 500
        :align: center

Objectifs d'apprentissage
-----------------------------

* Comprendre comment assembler les moteurs dans le syst√®me de suspension Rocker-Bogie du rover martien.
* Apprendre √† utiliser Arduino pour contr√¥ler le mouvement du rover martien.
* S'exercer √† √©crire un programme pour contr√¥ler le mouvement du rover sur diff√©rents terrains.

Mat√©riel n√©cessaire
----------------------------
* Carte SunFounder R3
* Moteurs TT
* Shield GalaxyRVR
* Batterie
* Mod√®le de Rover martien (√©quip√© du syst√®me Rocker-Bogie)
* Outils de base et accessoires (tournevis, vis, etc.)
* C√¢ble USB
* IDE Arduino
* Ordinateur

√âtapes
--------------

**√âtape 1 : Assemblage des composants du Rover**

Dans cette √©tape, nous allons assembler la batterie, la carte R3, le Shield GalaxyRVR, les moteurs et les roues sur le syst√®me Rocker-Bogie pr√©-assembl√©. Cela rendra le GalaxyRVR op√©rationnel.

.. raw:: html

    <iframe width="600" height="400" src="https://www.youtube.com/embed/lu8K26MY96s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

F√©licitations ! Nous avons r√©ussi √† construire notre propre rover, et il est pr√™t √† explorer. Allons-y !

**√âtape 2 : Mettre le Rover en Mouvement**

Il est maintenant temps de donner vie √† notre cr√©ation et de l'envoyer dans sa premi√®re aventure. 
Mais comment communiquer avec notre rover ? Comment lui dire o√π aller et quoi faire ? 
C'est l√† que nos comp√©tences en codage entrent en jeu !

Dans la r√©alit√©, si nous voulons qu'une voiture avance, nous appuyons sur l'acc√©l√©rateur, et les deux roues commencent √† tourner. 
Les roues du c√¥t√© droit tournent dans le sens des aiguilles d'une montre, tandis que celles du c√¥t√© gauche tournent dans le sens inverse.

.. image:: img/move_car.gif
    :align: center

Imaginez que vous √™tes assis au volant, le monde d√©filant autour de vous tandis que vous parcourez la route ‚Äì c'est exactement l'exp√©rience que nous allons offrir √† notre rover.

Maintenant, traduisons cette exp√©rience dans le langage que notre rover comprend ‚Äì le code !

    .. code-block:: arduino

        #include <SoftPWM.h>

        // D√©finir les broches des moteurs 
        const int in1 = 2;
        const int in2 = 3;
        const int in3 = 4;
        const int in4 = 5;

        void setup() {
            // Initialiser SoftPWM
            SoftPWMBegin();
        }

        void loop() {
            // Faire tourner les moteurs gauches dans le sens inverse des aiguilles d'une montre
            SoftPWMSet(in1, 255);  // Vitesse maximale
            SoftPWMSet(in2, 0);    // Arr√™t
            
            // Faire tourner les moteurs droits dans le sens des aiguilles d'une montre
            SoftPWMSet(in3, 0);    // Arr√™t
            SoftPWMSet(in4, 255);  // Vitesse maximale
            
        }

Dans ce code, nous parlons √† notre rover en lui indiquant exactement quoi faire. 
Avec la fonction ``SoftPWMSet()``, nous agissons comme l'acc√©l√©rateur et les freins de la voiture, 
en contr√¥lant la vitesse et la direction de chaque moteur. 
Nous disons aux moteurs gauches de tourner dans le sens inverse des aiguilles d'une montre et aux moteurs droits de tourner dans le sens des aiguilles d'une montre, et voil√†, notre rover avance !

Effectivement, le concept de faire reculer le rover est simple une fois que vous comprenez comment le faire avancer.
Pour faire reculer le rover, nous devons simplement inverser le sens de rotation de chaque moteur. 

Voici comment nous le faisons en code : nous faisons exactement l'oppos√©. Les roues droites doivent maintenant tourner dans le sens inverse des aiguilles d'une montre, et les roues gauches doivent tourner dans le sens des aiguilles d'une montre.

.. code-block:: arduino
    :emphasize-lines: 16,17,20,21

    #include <SoftPWM.h>

    // D√©finir les broches des moteurs 
    const int in1 = 2;
    const int in2 = 3;
    const int in3 = 4;
    const int in4 = 5;

    void setup() {
        // Initialiser SoftPWM
        SoftPWMBegin();
    }

    void loop() {
        // Faire tourner les moteurs gauches dans le sens des aiguilles d'une montre
        SoftPWMSet(in1, 0);    // Arr√™t
        SoftPWMSet(in2, 255);  // Vitesse maximale

        // Faire tourner les moteurs droits dans le sens inverse des aiguilles d'une montre
        SoftPWMSet(in3, 255);  // Vitesse maximale
        SoftPWMSet(in4, 0);    // Arr√™t
        
    }

Dans ce code, nous utilisons ``SoftPWMSet()`` pour indiquer aux moteurs gauches de tourner dans le sens des aiguilles d'une montre et aux moteurs droits de tourner dans le sens inverse des aiguilles d'une montre.

N'est-ce pas fascinant de voir que nous pouvons contr√¥ler le parcours de notre rover simplement avec du code ? La prochaine fois que vous serez dans une voiture, pensez au voyage de votre rover, explorant le monde une rotation √† la fois. Restez √† l'√©coute, car le voyage de notre rover ne fait que commencer !

**√âtape 3 : Faire Bouger le Rover dans D'autres Directions**

Maintenant que nous savons comment d√©placer notre rover martien en avant et en arri√®re, que faire si nous voulons le faire tourner √† gauche ou √† droite ?

Tout comme dans la conduite r√©elle, il existe deux fa√ßons principales pour une voiture de tourner √† gauche.

* La premi√®re consiste √† faire tourner les roues du c√¥t√© gauche plus lentement que celles du c√¥t√© droit. Cette diff√©rence de vitesse fera tourner le rover vers la gauche.
* La deuxi√®me consiste √† faire tourner les moteurs gauche et droit dans la m√™me direction (dans le sens des aiguilles d'une montre dans ce cas), ce qui fera tourner le rover sur son axe.

Voyons comment nous pouvons impl√©menter ces deux m√©thodes en code :

**M√©thode 1 : Diff√©rentes vitesses de chaque c√¥t√©**

.. code-block:: arduino
    :emphasize-lines: 16,17,20,21

    #include <SoftPWM.h>

    // D√©finir les broches des moteurs 
    const int in1 = 2;
    const int in2 = 3;
    const int in3 = 4;
    const int in4 = 5;

    void setup() {
        // Initialiser SoftPWM
        SoftPWMBegin();
    }

    void loop() {
        // Faire tourner les moteurs gauches dans le sens inverse √† faible vitesse
        SoftPWMSet(in1, 40);
        SoftPWMSet(in2, 0);

        // Faire tourner les moteurs droits dans le sens des aiguilles d'une montre √† plus grande vitesse
        SoftPWMSet(in3, 0);
        SoftPWMSet(in4, 200);

        delay(2000);  // Dure 2 secondes
    }

Dans ce code, nous avons r√©duit la vitesse des moteurs gauches tout en maintenant les moteurs droits √† une vitesse plus √©lev√©e. Cela fera tourner le rover vers la gauche.

**M√©thode 2 : Faire tourner tous les moteurs dans la m√™me direction**

.. code-block:: arduino
    :emphasize-lines: 16,17,18,19

    #include <SoftPWM.h>

    // D√©finir les broches des moteurs
    const int in1 = 2;
    const int in2 = 3;
    const int in3 = 4;
    const int in4 = 5;

    void setup() {
        // Initialiser SoftPWM
        SoftPWMBegin();
    }

    void loop() {
        // Faire tourner tous les moteurs dans le sens des aiguilles d'une montre
        SoftPWMSet(in1, 0);
        SoftPWMSet(in2, 255);
        SoftPWMSet(in3, 0);
        SoftPWMSet(in4, 255);
    }

Dans ce code, nous faisons tourner tous les moteurs dans le sens des aiguilles d'une montre. Le rover tournera autour de son propre axe et changera de direction vers la gauche.

Pour faire tourner le rover √† droite, les concepts sont les m√™mes, mais les directions sont invers√©es. Saurez-vous comment le faire ?

**√âtape 4 : Se D√©placer dans Toutes les Directions**

√Ä mesure que nous d√©veloppons plus de fonctionnalit√©s pour notre rover martien, notre code pourrait devenir assez long et d√©sordonn√©. En programmation, il est bon de garder son code organis√© et maintenable. Une fa√ßon d'y parvenir est de cr√©er des fonctions s√©par√©es pour chaque t√¢che.

Dans ce cas, nous pouvons cr√©er des fonctions s√©par√©es pour chaque direction dans laquelle le rover peut se d√©placer. Cela rend notre code plus facile √† comprendre et nous permet de r√©utiliser ces fonctions n'importe o√π dans notre programme sans avoir √† r√©√©crire les m√™mes lignes de code.

Voyons comment faire cela :

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/90c13522-9757-4212-b250-63ffbc790fd3/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Avec cette structure, notre boucle principale reste simple et facile √† suivre. On peut voir clairement que le rover avance, recule, 
tourne √† gauche, √† droite, et s'arr√™te.

.. raw:: html

   <video width="600" loop autoplay muted>
      <source src="_static/video/car_move.mp4" type="video/mp4">
      Your browser does not support the video tag.
   </video>

Les d√©tails de chaque action sont cach√©s dans des fonctions s√©par√©es. C'est un aspect cl√© des bonnes pratiques de programmation appel√© abstraction.

**√âtape 5 : Partage et R√©flexion**

F√©licitations pour avoir termin√© cette aventure avec le rover martien ! C'est une application pratique de vos connaissances en science et en ing√©nierie, et vous avez fait un travail fantastique !

Vous pouvez maintenant montrer comment votre rover surmonte divers obstacles de terrain. Vous pouvez filmer votre rover naviguant sur diff√©rents terrains, ou montrer votre rover √† vos amis.

R√©fl√©chir √† votre processus d'apprentissage est √©galement tr√®s important. Qu'avez-vous appris au cours de ce processus ? De nouvelles id√©es ou pens√©es cr√©atives ont-elles √©merg√© ? Qu'avez-vous appris en mati√®re de contr√¥le des moteurs et de programmation ?

Continuez √† explorer, √† d√©couvrir de nouvelles connaissances et √† vous am√©liorer constamment. Continuez comme √ßa, futurs scientifiques et ing√©nieurs !
